/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.key;

import java.io.PrintWriter;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.CheckPage;
import com.whu.tools.DBTools;
import com.whu.tools.SystemConstant;
import com.whu.tools.crypto.KeyFactory;
import com.whu.web.common.SystemShare;
import com.whu.web.log.LogBean;
import com.whu.web.log.LogManageForm;

/** 
 * MyEclipse Struts
 * Creation date: 02-17-2014
 * 
 * XDoclet definition:
 * @struts.action path="/keyManageAction" name="keyManageForm" parameter="method" scope="request" validate="true"
 */
public class KeyManageAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		KeyManageForm keyManageForm = (KeyManageForm) form;
		CheckPage pageBean = new CheckPage();
		int queryPageNo = 1;// 
		int rowsPerPage = 20;// 
		pageBean.setRowsPerPage(rowsPerPage);
		if (request.getParameter("queryPageNo") != null && request.getParameter("queryPageNo") != "") {
			queryPageNo = Integer.parseInt(request.getParameter("queryPageNo"));
		}
		pageBean.setQueryPageNo(queryPageNo);
		String sql = "select * from SYS_KEYINFO";
		String[] params = new String[0];
		request.getSession().setAttribute("queryKeySql", sql);
		request.getSession().setAttribute("queryKeyParams", params);
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		DBTools db = new DBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryKeyList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			keyManageForm.setRecordNotFind("false");
			keyManageForm.setRecordList(result);
			
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			keyManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		//根据阶段的不同跳转到不同的页面
		return mapping.findForward("init");
	}
	/**
	 * 查询和分页
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward queryMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		KeyManageForm keyManageForm = (KeyManageForm) form;
		String operation = request.getParameter("operation");
		//String orderField = request.getParameter("orderField");
		//String orderDirection = request.getParameter("orderDirection");

		CheckPage pageBean = new CheckPage();
		String sql = "";
		String[] params = new String[0];
		int queryPageNo = 1;
		int rowsPerPage = 20;
		pageBean.setRowsPerPage(rowsPerPage);

		if (operation.equalsIgnoreCase("search") || operation.equalsIgnoreCase("select")) {
			String keyBeginTime = keyManageForm.getKeyBeginTime();
			String keyEndTime = keyManageForm.getKeyEndTime();
			String temp = "";
			ArrayList<String> paramList = new ArrayList<String>();
			if(keyBeginTime != null && !keyBeginTime.equals(""))
			{
				temp += " and STARTTIME >= ?";
				paramList.add(keyBeginTime);
			}
			if(keyEndTime != null && !keyEndTime.equals(""))
			{
				temp += " and ENDTIME <= ?";
				paramList.add(keyEndTime);
			}
			params = paramList.toArray(new String[0]);
			sql = "select * from SYS_KEYINFO where 1=1 " + temp;
			request.getSession().setAttribute("queryKeySql", sql);
			request.getSession().setAttribute("queryKeyParms", params);
		}
		
		else if(operation.equalsIgnoreCase("changePage")){
			sql = (String)request.getSession().getAttribute("queryKeySql");
			params = (String[])request.getSession().getAttribute("queryKeyParams");
			/*
			if(orderField != null && !orderField.equals(""))
			{
				//去掉默认的以ID排序，即ID desc共7个字符，然后附加上用户选择的排序字段
				sql = sql.substring(0, sql.length()-7);
				sql += orderField + " " + orderDirection;
			}
			*/
			if (request.getParameter("pageNum") != null && request.getParameter("pageNum") != "") {
				queryPageNo = Integer.parseInt(request.getParameter("pageNum"));
			}
		}
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		pageBean.setQueryPageNo(queryPageNo);
		DBTools db = new DBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryKeyList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			keyManageForm.setRecordNotFind("false");
			keyManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			keyManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		return mapping.findForward("init");
	}
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		
		String ids = request.getParameter("ids");
		DBTools dbTool = new DBTools();
		boolean result = true;
		if(ids == null || ids.equals(""))
		{
			String id = request.getParameter("id");
			result = dbTool.deleteItemReal(id, "SYS_KEYINFO", "ID");
		}
		else
		{
			String[] arrID = ids.split(",");
			result = dbTool.deleteItemsReal(arrID, "SYS_KEYINFO", "ID");
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "删除成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "删除失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
	/**
	 * 生成新的密钥文件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward newKey(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		KeyFactory kf = KeyFactory.getKey();
		//kf.initKey();
		
		//密钥文件目录
		String dirPath = request.getSession().getServletContext().getRealPath("/")+"/key/";
		String serverPath = "key" + "/";
		//文件名称
		String keyName = SystemShare.GetNowTime("yyyyMMddHHmmss") + ".out";
		//文件绝对路径
		String path = dirPath + keyName;
		serverPath += keyName;
		//生成密钥文件，并保存到磁盘
		boolean result = kf.outputObject(path);
		//System.out.println(path);
		//System.out.println(serverPath);
		if(result)
		{
			DBTools dbTools = new DBTools();
			String sql = "insert into SYS_KEYINFO(KEYNAME,STARTTIME,ENDTIME,PATH,LOCALPATH,ISUSE) values(?, ?, ?, ?, ?, ?)";
		   String[] params = new String[]{keyName, "", "", serverPath, path, "0"};
			result = dbTools.insertItem(sql, params);
		    
		    dbTools.insertLogInfo((String)request.getSession().getAttribute("UserName"), SystemConstant.LOG_NEWKEY, "生成新的密钥文件，文件名为：" + keyName, request.getRemoteAddr());
		}
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "生成密钥文件成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "生成密钥文件失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 启用某一个密钥文件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward enableKey(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String keyID = request.getParameter("id");
		String path = request.getParameter("path");
		DBTools dbTools = new DBTools();

		String time =SystemShare.GetNowTime("yyyy-MM-dd");
		
		String sql = "update SYS_KEYINFO set ENDTIME=?, ISUSE='0' where ISUSE='1'";
		boolean result = dbTools.insertItem(sql, new String[]{time});
		if(result)
		{
			sql = "update SYS_KEYINFO set STARTTIME=?, ISUSE='1' where ID=?";
			result = dbTools.insertItem(sql, new String[]{time, keyID});
			if(result)
			{
				//更新系统正在使用的密钥
				KeyFactory kf = KeyFactory.getKey();
				kf.inputObject(path);
				
				dbTools.insertLogInfo((String)request.getSession().getAttribute("UserName"), SystemConstant.LOG_ENABLEKEY, "启用密钥文件，文件编号为：" + keyID, request.getRemoteAddr());
			}
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "启用密钥文件成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "启用密钥文件失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 导入密钥文件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward importKey(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DBTools dbTools = new DBTools();
		boolean result = false;
		String keyPath = (String)request.getSession().getAttribute("keyPath");
		if(keyPath!=null && !keyPath.equals(""))
		{
			String localPath = (String)request.getSession().getAttribute("LocalPath");
			String keyName =  (String)request.getSession().getAttribute("keyName");
			String sql = "insert into SYS_KEYINFO(KEYNAME,PATH,LOCALPATH,ISUSE) values(?, ?, ?, ?)";
			String[] params = new String[]{keyName, keyPath, localPath, "0"};
			result = dbTools.insertItem(sql, params);
			if(result)
			{
				dbTools.insertLogInfo((String)request.getSession().getAttribute("UserName"), SystemConstant.LOG_IMPORTKEY, "导入密钥文件，文件名为：" + keyName, request.getRemoteAddr());
			}
			request.getSession().setAttribute("keyPath", "");
	       	request.getSession().setAttribute("LocalPath", "");
	       	request.getSession().setAttribute("keyName", "");
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "导入密钥文件成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "导入密钥文件失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
}