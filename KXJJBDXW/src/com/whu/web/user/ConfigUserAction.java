/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.user;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.whu.tools.DBTools;
import com.whu.web.common.SystemShare;

/** 
 * MyEclipse Struts
 * Creation date: 01-07-2014
 * 
 * XDoclet definition:
 * @struts.action path="/configUserAction" name="configUserForm" parameter="method" scope="request" validate="true"
 */
public class ConfigUserAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		ConfigUserForm configUserForm = (ConfigUserForm)form;
		String operation = request.getParameter("operation");
		if(operation == null) return null;
		String loginName = configUserForm.getLoginName();
		//String pwd = configUserForm.getPwd();
		//String zzName = request.getParameter("org6.zzName");
		String zzID = request.getParameter("org6.zzID");
		if(zzID.equals(""))
		{
			zzID = "8003";//如果没有指定组织，则将组织临时设置为“其他单位”，防止联合查询时该字段为空
		}
		//String roleName = request.getParameter("org7.role");
		String roleID = request.getParameter("org7.roleID");
		String posID = request.getParameter("org8.posID");
		String userName = configUserForm.getUserName();
		String sex = configUserForm.getSex();
		String isHead =configUserForm.getIsHead();
		String mailAddress = configUserForm.getMailAddress();
		String telPhone = configUserForm.getTelPhone();
		String bgPhone = configUserForm.getBgPhone();
		String bgsNum = configUserForm.getBgsNum();
		String dept = configUserForm.getDept();
		
		DBTools dbTool = new DBTools();
		String sql = "";
		String[] params = new String[0];
		
		boolean result1 = true;
		if(operation.equals("new"))
		{
			result1 = dbTool.checkNotExist(loginName);
			// loginName cannot conflict with users in SYS_USER;
			if (result1) {
				String createTime = SystemShare.GetNowTime("yyyy-MM-dd");
				sql = "insert into SYS_USER(LOGINNAME,USERNAME,PASSWORD,SEX,MAILADDRESS,BGPHONE,TELPHONE,BGSNUM,CREATETIME,ZZID,ROLEIDS,POSIDS,ISHEAD) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
				params = new String[]{loginName, userName, "NSFC123456", sex, mailAddress, bgPhone, telPhone, bgsNum, createTime, zzID, roleID, posID, isHead};
			}
		}
		else if(operation.equals("edit"))
		{
			String id = configUserForm.getId();
			sql = "update SYS_USER set USERNAME=?,SEX=?,MAILADDRESS=?,BGPHONE=?,TELPHONE=?,BGSNUM=?,ZZID=?,ROLEIDS=?,POSIDS=?,ISHEAD=? where ID=?";
			params = new String[]{userName, sex, mailAddress, bgPhone, telPhone, bgsNum, zzID, roleID, posID, isHead, id};
		}
		

		boolean result = true;
		if (result1)
			result = dbTool.insertItem(sql, params);
		/*
		if(!roleID.equals(""))
		{
			String[] arrID = roleID.split(",");
			try {
				result = dbTool.InsertUserRole(arrID, loginName);
			} catch (SQLException e) {
				e.printStackTrace();
				result = false;
			}
		}
		*/
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result && result1)
		{
			json.put("statusCode", 200);
			json.put("message", "保存成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "保存失败！");
			if (!result1) 
				json.put("message", "用户名重复!添加失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
		
	}
	/**
	 * 编辑用户信息，跳转
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		
		ConfigUserForm configUserForm = (ConfigUserForm)form;
		
		String id = request.getParameter("uid");
		DBTools dbTools = new DBTools();
		String sql = "select a.*,b.ZZNAME from SYS_USER a,SYS_ZZINFO b where a.ZZID=b.ZZID and a.ID=?";
		UserBean userBean = dbTools.queryUserBean(sql, new String[]{id});
		ArrayList result = new ArrayList();
		if(userBean!=null)
		{
			String roleIDs = userBean.getRoleIDs();
			request.setAttribute("uSex",userBean.getSex());
			request.setAttribute("isHead",userBean.getIsHead());
			String roleNames = "";
			if(roleIDs != null && !roleIDs.equals(""))
			{
				String[] roleIdArray = roleIDs.split(",");
				int len  = roleIdArray.length;
				StringBuilder sqlBuilder = new StringBuilder("select ROLENAME from SYS_ROLE where ID in (");
				for(int i = 0; i < len; i++) {
					sqlBuilder.append(" ?,");
					if(i == len - 1) sqlBuilder.replace(sqlBuilder.length()-1, sqlBuilder.length(), ")");
				}
				sql = sqlBuilder.toString();
				roleNames = dbTools.queryRoleNames(sql, roleIdArray);
				if(!roleNames.equals(""))
				{
					roleNames = roleNames.substring(0, roleNames.length() - 1);
				}
			}
			userBean.setRoleNames(roleNames);
			
			String posIDs = userBean.getPosIDs();
			String posNames = "";
			if(posIDs != null && !posIDs.equals(""))
			{
				String[] posIdArray = posIDs.split(",");
				int len  = posIdArray.length;
				StringBuilder sqlBuilder = new StringBuilder("select POSNAME from SYS_POSITION where ID in (");
				for(int i = 0; i < len; i++) {
					sqlBuilder.append(" ?");
					if(i == len - 1) sqlBuilder.replace(sqlBuilder.length(), sqlBuilder.length(), ")");
				}
				sql = sqlBuilder.toString();
				posNames = dbTools.queryPosNames(sql, posIdArray);
				if(!posNames.equals(""))
				{
					posNames = posNames.substring(0, posNames.length() - 1);
				}
			}
			userBean.setPosNames(posNames);
			
			result.add(userBean);
			configUserForm.setRecordNotFind("false");
			configUserForm.setRecordList(result);
			return mapping.findForward("edit");
		}
		else
		{
			configUserForm.setRecordNotFind("true");
			return mapping.findForward("initError");
		}
	}
}