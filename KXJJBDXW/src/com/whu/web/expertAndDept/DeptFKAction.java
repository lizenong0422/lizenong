/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.expertAndDept;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.DBTools;
import com.whu.tools.SystemConstant;
import com.whu.web.common.SystemShare;
import com.whu.web.event.BeReportBean;
import com.whu.web.eventbean.JDYJSBean;
import com.whu.web.eventmanage.CheckEventForm;

/** 
 * MyEclipse Struts
 * Creation date: 05-21-2014
 * 
 * XDoclet definition:
 * @struts.action path="/deptFKAction" name="deptFKForm" parameter="method" scope="request" validate="true"
 */
public class DeptFKAction extends DispatchAction {
	
	/**
	 * 鉴定专家在线提交鉴定意见和鉴定结论
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 */
	public ActionForward submitAdvice(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DeptFKForm deptFKForm = (DeptFKForm)form;
		String id = deptFKForm.getDcID();
		String reportID = deptFKForm.getReportID();
		String adviceID = deptFKForm.getAdviceID();
		String deptAdvice = deptFKForm.getDeptAdvice();
		String litigantName = deptFKForm.getLitigantName();
		String attitude = deptFKForm.getAttitude();
		String litigantTime = deptFKForm.getLitigantTime();
		String expertAdvice = deptFKForm.getExpertAdvice();
		//上传附件
		String fileName = "";
		String attachName = "";
		String time = SystemShare.GetNowTime("yyyy-MM-dd");
		
		String filePath = request.getSession().getServletContext().getRealPath("/")+"/attachment/dept/";
		//String path1 = filePath + "temp";
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String userName = (String)request.getSession().getAttribute("UserName");
		String path1 = request.getSession().getServletContext().getRealPath("/") + "/temp/" + loginName + "/";
		String path2 = filePath + reportID;
		//获得服务器的IP地址路径，存放在数据库中，便于下载
		String relDirectory = "attachment" + "/dept/" + reportID;
		//将临时文件夹中的附件转存到以警情编号为目录的文件夹下
		SystemShare.IOCopy(path1, path2, relDirectory, userName);
		
		attachName =  (String)request.getSession().getAttribute("AdviceFKAttach");
		if(attachName != null && !attachName.equals(""))
		{
			attachName = "dept/" + reportID + "/" + attachName;
			request.getSession().setAttribute("AdviceFKAttach","");
		}
		else
		{
			attachName = "";
		}

		DBTools dbTools = new DBTools();
		String tempsql="select ID from TB_LITIGANTSTATE where DEPTADVICEID=?";
		String[] tempParams = new String[]{adviceID};
      String sql = "update TB_DEPTADVICE set ADVICE=?,TIME=?,ISFK=?,ATTACHNAME=?,EXPERTADVICE=? where ID=?";
      String[] params = new String[]{deptAdvice, time, "1", attachName, expertAdvice, adviceID};
      boolean result = dbTools.insertItem(sql, params);
      
      BeReportBean brb = null;
      String beID = "";
      String beName = "";
      String beidNumber = "";
      String beBirth = "";
      ArrayList list = new ArrayList();
		for(int i = 0; i < SystemConstant.beReportNum; i++)
		{
			beID = request.getParameter("beReportedList[" + i + "].ID");
			beName = request.getParameter("beReportedList[" + i + "].beName");
			beidNumber = request.getParameter("beReportedList[" + i + "].beidNumber");
			beBirth = request.getParameter("beReportedList[" + i + "].birth"); 
			if(beName != null && beName != "")
			{
				brb = new BeReportBean();
				brb.setID(beID);
				brb.setBeName(beName);
				brb.setIdNumber(beidNumber);
				brb.setBirth(beBirth);
				list.add(brb);
			}
		}
		try {
			//插入被举报人信息
			result = result && dbTools.updateBeReportFK(list);
		} catch (SQLException e) {
			e.printStackTrace();
			result = result && false;
		}
        
      if(result)
        {
        	String describe = time + "," + userName + "在线提交该单位的调查意见";
			//插入处理过程到数据库中
			result = dbTools.InsertHandleProcess(reportID, userName, SystemConstant.HP_DEPTADVICE, SystemConstant.SS_SURVEYING, SystemConstant.LCT_DWDC, describe);
			
        	//将该反馈消息插入到数据库中，便于在管理平台首页可以查看到该反馈消息，提醒工作人员
        	sql = "insert into TB_FKRECODER(REPORTID, TIME,TYPE,FKNAME) values(?, ?, ?, ?)";
        	params = new String[]{reportID, time, SystemConstant.REPLY_DEPT, userName};
        	dbTools.insertItem(sql, params);
        }
        
      if(result)
        {
        	//sql = "if not exists(select ID from TB_LITIGANTSTATE where DEPTADVICEID='" + adviceID + "') insert into TB_LITIGANTSTATE(REPORTID,LITIGANTNAME,LITIGANTTIME,LITIGANTCONTENT,DEPTADVICEID) values('" + reportID + "','" + litigantName + "','" + litigantTime + "','" + attitude + "','" + adviceID + "') else update TB_LITIGANTSTATE set LITIGANTNAME='" + litigantName + "', LITIGANTTIME='" + litigantTime + "',LITIGANTCONTENT='" + attitude +  "' where DEPTADVICEID='" + adviceID + "'";
    	   boolean flag=dbTools.queryISEXIST(tempsql, tempParams);
    	   if(flag)
    	   {
    		   sql="insert into TB_LITIGANTSTATE(REPORTID,LITIGANTNAME,LITIGANTTIME,LITIGANTCONTENT,DEPTADVICEID) values(?, ?, ?, ?, ?)";
    		   params = new String[]{reportID, litigantName, litigantTime, attitude, adviceID};
    	   }
    	   else
    	   {
    		   sql="update TB_LITIGANTSTATE set LITIGANTNAME=?, LITIGANTTIME=?,LITIGANTCONTENT=? where DEPTADVICEID=?";
    		   params = new String[]{litigantName, litigantTime, attitude, adviceID};
    	   }
    	  result = dbTools.insertItem(sql, params);
        }

        if(result)
        {
			sql = "update TB_ED_ADVICE set ISSUBMIT='1' where ID=?";
			result = dbTools.insertItem(sql, new String[]{id});
        }
      PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "提交成功！");
			json.put("callbackType", "closeCurrent");
			json.put("navTabId", "ajdc");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "提交失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
}