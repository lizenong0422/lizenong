/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.eventmanage;

import java.io.File;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.CheckPage;
import com.whu.tools.DBTools;
import com.whu.tools.DebugLog;
import com.whu.tools.ExcelTools;
import com.whu.tools.SystemConstant;
import com.whu.tools.XmlTools;
import com.whu.tools.crypto.AESCrypto;
import com.whu.web.common.SystemShare;
import com.whu.web.event.EventBean;
import com.whu.web.event.BeReportBean;//coding test
import com.whu.web.eventbean.CheckBean;
import com.whu.web.eventbean.DeptAdvice;
import com.whu.web.eventbean.ExpertAdvice;
import com.whu.web.eventbean.FacultyAdviceBean;
import com.whu.web.eventbean.LitigantState;
import com.whu.web.eventbean.PrintBean;
import com.whu.web.eventbean.SjybdBean;
import com.whu.web.eventbean.SurveyReportBean;
import com.whu.web.log.LogBean;
import com.whu.web.wsjb.*;

/** 
 * MyEclipse Struts
 * Creation date: 12-30-2013
 * 
 * XDoclet definition:
 * @struts.action path="/eventManageAction" name="eventManageForm" parameter="method" scope="request" validate="true"
 */
public class EventManageAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static List<String> orderFields =  Arrays.asList(new String[]{"SERIALNUM","a.STATUS","a.REPORTTIME","a.OFFICER"});
	
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EventManageForm eventManageForm = (EventManageForm) form;
		DBTools db = new DBTools();
		
		// get isHead, Leader can see all event, otherwise see event belongs to himself
		String isHead = (String)request.getSession().getAttribute("IsHead");//是否领导
		String officer = (String)request.getSession().getAttribute("LoginName");
		
		//获得阶段编号
		String jdID = request.getParameter("jdid");
		String sql = "";
		String[] params = new String[0];
		String jdName = SystemShare.GetJDName(jdID);//比如:sljd
		//事件审核
		if(jdID.equals("4"))
		{
			//String loginName = (String)request.getSession().getAttribute("LoginName");
			String recvName =  (String)request.getSession().getAttribute("UserName");
			//String tempSql = "select REPORTID from TB_MSGNOTIFY where (RECVNAME=? or AGENTOFFICER=? ) and TYPE=? and ISHANDLE='0'";
			//String ids = db.queryUnApprove(tempSql, new String[]{recvName,recvName, SystemConstant.MSG_GZTX});
			
			String tempSql = "select REPORTID from TB_MSGNOTIFY where TYPE=? and ISHANDLE='0'";
			String ids = db.queryUnApprove(tempSql, new String[]{SystemConstant.MSG_GZTX});
			
			if(!ids.equals(""))
			{
		    //StringBuilder sqlBuilder = new StringBuilder("select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM from TB_REPORTINFO a, SYS_DATA_DIC b where a.REPORTID in (");
				StringBuilder sqlBuilder =  new StringBuilder("select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER,c.AGENTOFFICER,a.MERGEID,a.LASTTIME,a.RECORDER from TB_REPORTINFO a, SYS_DATA_DIC b, TB_CHECKINFO c where a.REPORTID=c.REPORTID and a.REPORTID in (");
				String[] idArray = ids.split(",");
				for(int i = 0; i < idArray.length; i++) {
					sqlBuilder.append(" ?,");
					if(i == idArray.length - 1) sqlBuilder.replace(sqlBuilder.length()-1, sqlBuilder.length(), ")");					
				}
				sqlBuilder.append(" and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' and (a.STATUS='" + SystemConstant.SS_CHECKEVENT+"'or a.STATUS='"+ SystemConstant.SS_YSH+ "') and a.ISDELETE='0' ");
				if ( isHead == null || isHead.equals("0"))
				{
					sqlBuilder.append(" and (find_in_set('"+officer+"',a.OFFICER) or c.AGENTOFFICER='"+officer+"') order by REPORTTIME desc");
				}
				else 	sqlBuilder.append(" order by REPORTTIME desc");
		//		sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER from TB_REPORTINFO a, SYS_DATA_DIC b where a.REPORTID in (" + ids + ") and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' and a.STATUS='" + SystemConstant.SS_CHECKEVENT + "' and a.ISDELETE='0' order by REPORTTIME asc";
				sql = sqlBuilder.toString();
				params = idArray;
			}
			else//没有记录，但是也需要设置一下查询语句，否则会报错，返回没有结果集
			{
				sql = "select * from TB_REPORTINFO a,TB_CHECKINFO b where 1=0 and a.REPORTID=b.REPORTID";
			}
		}
		else
		{
			String tempStr =  GetQuerySql(jdID);
			if ( isHead != null && isHead.equals("1")) {
				sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER,a.MERGEID,a.RECORDER,a.LASTTIME from TB_REPORTINFO a, SYS_DATA_DIC b where " +  tempStr + " and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' order by REPORTTIME desc";				
				params = new String[0];
			} else { // officer only see events belong to himself
				sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER,a.MERGEID,a.RECORDER,a.LASTTIME from TB_REPORTINFO a, SYS_DATA_DIC b where find_in_set(?,a.OFFICER) and " +  tempStr + " and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' order by REPORTTIME desc";
				params = new String[]{officer};
			}			
		}
		CheckPage pageBean = new CheckPage();
		int queryPageNo = 1;// 
		int rowsPerPage = 20;// 
		pageBean.setRowsPerPage(rowsPerPage);
		
		pageBean.setQueryPageNo(queryPageNo);
		request.getSession().setAttribute("query" + jdName + "Sql", sql);
		request.getSession().setAttribute("query" + jdName + "Params", params);
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result;
		if(jdID.equals("4"))
		{
			result = db.queryEventListSjsh(rs, rowsPerPage);
		}
		else{
			result = db.queryEventList(rs, rowsPerPage);
		}
		
		if(result.size() > 0)
		{
			eventManageForm.setRecordNotFind("false");
			eventManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);//生成分页数据
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		//根据阶段的不同跳转到不同的页面
		return mapping.findForward(jdName);
	}
	/**
	 * 查询和分页
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward queryMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		EventManageForm eventManageForm = (EventManageForm) form;
		String operation = request.getParameter("operation");
		
		//排序控制
		String orderField = request.getParameter("orderField");//排序的字段(数据库字段名称)
		String orderDirection = request.getParameter("orderDirection");//排序的方向，desc,asc
		
		

		String isHead = (String)request.getSession().getAttribute("IsHead");
		String officer = (String)request.getSession().getAttribute("LoginName");
		
		//首先判断是否是“普通检索”，如果是，则将session中标记“高级检索”的字段设置为false
		if (operation.equalsIgnoreCase("search") || operation.equalsIgnoreCase("select")) {
			request.getSession().setAttribute("GjSearch", "false");
		}
		
		CheckPage pageBean = new CheckPage();
		String sql = "";
		String[] params = new String[0];
		int queryPageNo = 1;
		int rowsPerPage = 20;
		pageBean.setRowsPerPage(rowsPerPage);
		String jdName = "";
		DBTools db = new DBTools();
		String gjSearchFlag = (String)request.getSession().getAttribute("GjSearch");
		//如果是高级检索，则从session中获得查询条件
		if(gjSearchFlag!=null && gjSearchFlag.equals("true"))
		{
			sql = (String)request.getSession().getAttribute("GjSearchSql");
			params = (String[])request.getSession().getAttribute("GjSearchParams");
			request.getSession().setAttribute("queryallSql", sql);
			request.getSession().setAttribute("queryallParams", params);
			jdName = "all";
		}else
		{
			String jdID = request.getParameter("jdid");
			if (jdID != null)
				jdName = SystemShare.GetJDName(jdID);

			if (operation.equalsIgnoreCase("search") || operation.equalsIgnoreCase("select")) {
				String IsNi = request.getParameter("isNi");
				
				String serialNum = eventManageForm.getSerialNum();
				String reportName = eventManageForm.getReportName();
				String beReportName = eventManageForm.getBeReportName();
				String jbBeginTime = eventManageForm.getJbBeginTime();
				String jbEndTime = eventManageForm.getJbEndTime();
				String temp = "";
				ArrayList<String> paramList = new ArrayList<String>();
				if(serialNum != null && !serialNum.equals(""))
				{
					temp += " and a.SERIALNUM=?";
					paramList.add(serialNum);
				}
				if(IsNi != null)//匿名举报，勾选了复选框
				{
					AESCrypto aes = new AESCrypto();
					String key = "TB_REPORTINFO";
					temp += " and hex(a.REPORTNAME) = '" + SystemShare.getHexString(aes.createEncryptor("匿名举报", key)) + "'";
				}
				else if(reportName != null && !reportName.equals(""))//不是匿名举报，则判断是否输入了举报人姓名
				{
					AESCrypto aes = new AESCrypto();
					String key = "TB_REPORTINFO";
					//调用sqlserver自定义函数比较加密后的数据是否相等。
					//compare_image1为比较函数，共两个参数，第一个为字段名称，第二个字段为加密后的数据（注意加密后为字节数据，需要转换为十六进制字符串，另在前面加上0x）
					temp += " and hex(a.REPORTNAME) = '" + SystemShare.getHexString(aes.createEncryptor(reportName, key)) + "'";
				}
				if(beReportName != null && !beReportName.equals(""))
				{
					temp += " and a.REPORTID in (select distinct REPORTID from TB_BEREPORTPE where 1=1 ";
					if(!beReportName.equals(""))
					{
						AESCrypto aes = new AESCrypto();
						String key = "TB_BEREPORTPE";
						temp += " and hex(BEREPORTNAME) = '" + SystemShare.getHexString(aes.createEncryptor(beReportName, key)) + "'";
					}
					temp += ")";
				}
				if(jbBeginTime != null && !jbBeginTime.equals(""))
				{
					temp += " and a.REPORTTIME >= ?";
					paramList.add(jbBeginTime);
				}
				if(jbEndTime != null && !jbEndTime.equals(""))
				{
					temp += " and a.REPORTTIME <= ?";
					paramList.add(jbEndTime);
				}
				
				
				if(jdID != null && jdID.equals("4"))
				{
					String userName = (String)request.getSession().getAttribute("UserName");
					String tempSql = "select REPORTID from TB_MSGNOTIFY where TYPE='" + SystemConstant.MSG_GZTX + "' and ISHANDLE='0' and (RECVNAME=? or AGENTOFFICER=? )"; // ... and (RECVNAME=? OR AGENTOFFICER=?)
					String ids = db.queryUnApprove(tempSql, new String[]{userName,userName});
					if(!ids.equals(""))
					{
						ids = ids.substring(0, ids.length() - 1);
						ids.replace(",", "','");
						String[] idArray = ids.split(",");
						StringBuilder sqlBuilder = new StringBuilder("select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.MERGEID,a.LASTTIME,a.OFFICER,a.RECORDER from TB_REPORTINFO a, SYS_DATA_DIC b where a.REPORTID in (");
						for (int i = 0; i < idArray.length; i++){
							sqlBuilder.append(" ?,");
							if(i == idArray.length - 1) {
								sqlBuilder.replace(sqlBuilder.length()-1, sqlBuilder.length(), ")");
							}
						}
						sqlBuilder.append(" and a.STATUS=b.CODE and a.STATUS='11' and b.CODENAME='" + SystemConstant.sjzt + "' " + temp + " order by REPORTTIME asc");
					//	sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER from TB_REPORTINFO a, SYS_DATA_DIC b where a.REPORTID in (" + ids + ") and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' " + temp + " order by REPORTTIME asc";
						sql = sqlBuilder.toString();
						List<String> idList = new ArrayList<String>(Arrays.asList(idArray));
						idList.addAll(paramList);
						params = idList.toArray(new String[0]);
					}
					else
					{
						sql = "select * from TB_REPORTINFO where 1=0";
						params = new String[0];
					}
				}
				else {
					String tempStr = GetQuerySql(jdID);
					
					if(isHead != null && isHead.equals("1"))
					{
						sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER,a.MERGEID,a.LASTTIME,a.RECORDER from TB_REPORTINFO a, SYS_DATA_DIC b where " +  tempStr + temp + " and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' order by REPORTTIME asc";				
					} else {
						sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER,a.MERGEID,a.LASTTIME,a.RECORDER from TB_REPORTINFO a, SYS_DATA_DIC b where a.OFFICER=? and " +  tempStr + temp + " and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' order by REPORTTIME asc";
						paramList.add(0, officer);
					}	
					params = paramList.toArray(new String[0]);
				}
				request.getSession().setAttribute("query" + jdName + "Sql", sql);
				request.getSession().setAttribute("query" + jdName + "Params", params);
			}
		}
		
		if(operation.equalsIgnoreCase("changePage")){
			sql = (String)request.getSession().getAttribute("query" + jdName + "Sql");
			params = (String[])request.getSession().getAttribute("query" + jdName + "Params");
			if(orderField != null && orderFields.contains(orderField) && orderDirection != null && orderDirection.matches("asc|desc"))
			{
				sql = sql.substring(0, sql.indexOf("order"));
				sql += " order by " + orderField + " " + orderDirection;
			}
			
			if (request.getParameter("pageNum") != null && request.getParameter("pageNum") != "") {
				queryPageNo = Integer.parseInt(request.getParameter("pageNum"));
			}
		}		
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		pageBean.setQueryPageNo(queryPageNo);
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		String jdID = request.getParameter("jdid");
		ArrayList result = db.queryEventList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			eventManageForm.setRecordNotFind("false");
			eventManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		return mapping.findForward(jdName);
	}
	/**
	 * 删除，如果type=noreal,则非真正删除，只是标记删除字段为“1”；如果type=real，则永久删除该记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
/*	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		
		String type = request.getParameter("type");
		
		LogBean lb = new LogBean();
		String userName = (String)request.getSession().getAttribute("UserName");
		lb.setOperator(userName);
		String logType = "";
		String detail = "";
		
		String ids = request.getParameter("ids");
		DBTools dbTool = new DBTools();
		boolean result = true;
		if(ids == null || ids == "")
		{
			String id = request.getParameter("id");
			
			logType = SystemConstant.LOG_DELETE;
			detail = "删除举报事件，事件编号为：" + id;
			
			if(type.equals("noreal"))
			{
				result = dbTool.deleteItem(id, "TB_REPORTINFO", "REPORTID");
			}
			else if(type.equals("real"))
			{
				result = dbTool.deleteItemReal(id, "TB_REPORTINFO", "REPORTID");
			}
		}
		else
		{
			detail = "批量删除举报事件，事件编号为：" + ids;
			
			String[] arrID = ids.split(",");
			logType = SystemConstant.LOG_DELETES;
			if(type.equals("noreal"))
			{
				result = dbTool.deleteItems(arrID, "TB_REPORTINFO", "REPORTID");
			}
			else if(type.equals("real"))
			{
				result = dbTool.deleteItemsReal(arrID, "TB_REPORTINFO", "REPORTID");
			}
		}
		lb.setLogType(logType);
		lb.setDetail(detail);
		lb.setIpAddr(request.getRemoteAddr());
		result = dbTool.insertLogInfo(lb);
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			if(type.equals("noreal"))
			{
				json.put("message", "删除成功，可在“已删除事件”中查看！");
			}
			else if(type.equals("real"))
			{
				json.put("message", "删除成功!");
			}
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "删除失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	} */
	/**
	 * 开始上会讨论
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward startHandle(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String ids = request.getParameter("ids");
		DBTools dbTool = new DBTools();
		String userName = (String)request.getSession().getAttribute("UserName");
		boolean result = true;
		if(ids != null && !ids.equals(""))
		{
			String[] arrID = ids.split(",");
			result = dbTool.updateItems(arrID, "TB_REPORTINFO", "REPORTID", "STATUS", SystemConstant.SS_HANDLEING);
		
			if(result)
			{
				
	    		String time = SystemShare.GetNowTime("yyyy-MM-dd");
	    		
				String describe = time + ", " + userName + "   提交全委会讨论";
				//插入处理过程到数据库中
				result = dbTool.qwhtlRecorder(arrID, userName, time, SystemConstant.HP_QWHTL, SystemConstant.SS_HANDLEING, SystemConstant.LCT_TL, describe);
			}
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "提交全委会讨论成功，这些事件转移到“处理阶段”！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "提交全委会讨论失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 根据阶段编号，得到需要查询的条件。用于统一全部事件、已删除事件、各个阶段的页面查询方法
	 * @param jdID
	 * @return
	 */
	public String GetQuerySql(String jdID)
	{
		String tempStr = "";
		if(jdID.equals(SystemConstant.SS_DELETE))//已删除事件
		{
			tempStr = " ISDELETE='1' ";
		}
		else if(jdID.equals(SystemConstant.SS_ALL))//全部事件
		{
			tempStr = " ISDELETE='0' ";
		}
		else//其他阶段的事件
		{
			tempStr = " ISDELETE='0' and " + jdID + " = substring(a.STATUS,1,1) ";
		}
		return tempStr;
	}
	/**
	 * 查询事件详情，初始化显示举报信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward detail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		//得到查询详情的类别：举报信息、核实信息等等
		String id = request.getParameter("id");
		String sql = "select * from TB_REPORTINFO where REPORTID=?";
		DBTools db = new DBTools();
		EventBean eb = db.queryEvent(sql, new String[]{id});
		/**
		String accessory = eb.getAccessory();
		if(accessory != null && !accessory.equals(""))
		{
			accessory = SystemConstant.GetServerPath() + "/" + accessory;
		}
		else
		{
			accessory = "";
		}
		eb.setAccessory(accessory);
		*/
		sql = "select * from TB_BEREPORTPE where REPORTID=?";
		ArrayList beReportList = db.queryBeReport(sql, new String[]{id});
		if(beReportList != null && beReportList.size() > 0)
		{
			eb.setBeReportList(beReportList);
		}
		if(eb != null)
		{
			ArrayList result = new ArrayList();
			result.add(eb);
			request.getSession().setAttribute("reportID", eb.getReportID());
			eventManageForm.setRecordNotFind("false");
			eventManageForm.setRecordList(result);
			if(eb.getIsRev().equals("1"))
				eventManageForm.setIsEdit("true");
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
		}
		return mapping.findForward("reportInfo");
	}
	
	/**
	 * 事件统计功能
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward tjInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String xAxisName = "状态";
		String yAxisName = "个数";
		String numberPrefix = "";
		
		String sql = "select b.CAPTION as TITLE,count(*) as NUM from TB_REPORTINFO a, SYS_DATA_DIC b where a.ISDELETE='0' and a.STATUS=b.CODE and b.CODENAME='ZDBZ_SJZT' group by b.CAPTION";
		DBTools dbTools = new DBTools();
		ArrayList itemList = dbTools.queryTjInfo(sql, new String[0]);
		XmlTools xmlTool = new XmlTools();
		String result = xmlTool.CreateXml("事件状态统计", xAxisName, yAxisName, numberPrefix, itemList, "2");
		//String temp = xmlTool.CreateLineXml("每季度举报与受理总数","个数");
		request.setAttribute("chartXml", result);
		//request.setAttribute("chartXml2", temp);
		return mapping.findForward("tjInfo");
	}
	/**
	 * 跳转到指定页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public ActionForward gyMethod(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		String type = request.getParameter("type");
		DBTools db = new DBTools();
		String sql = "";
		EventManageForm eventManageForm =  (EventManageForm) form;//coding test
		sql = "select * from TB_REPORTINFO where REPORTID=?";			
		EventBean eb = db.queryEvent(sql, new String[]{id});
		String reportInfo = "";
		String bz = "";
		if(eb!=null)
		{
			bz = eb.getBz();
			reportInfo = "举报人：" + eb.getReportName() + "\n被举报人：" + eb.getBeReportName() + "\n举报时间：" + eb.getReportTime() + "\n举报事由：" + eb.getReportReason();
		}
		request.setAttribute("ReportInfo", reportInfo);
		request.setAttribute("BZ", bz);
		
		if(type.equals("approve"))//如果是审核，则查询出初步核实信息
		{
			sql = "select * from TB_CHECKINFO where REPORTID=?";
			CheckBean cb = db.queryCheckInfo(sql, new String[]{id});
			request.setAttribute("CheckInfo", cb.getPreAdvice());
			request.setAttribute("CheckName", cb.getCheckName());
			request.setAttribute("CheckTime", cb.getCheckTime());
			request.setAttribute("PreAdvice", cb.getPreAdvice());
		}
		else if(type.equals("finalApprove"))
		{
			sql = "select * from TB_CHECKINFO where REPORTID=?";
			CheckBean cb = db.queryCheckInfo(sql, new String[]{id});
			request.setAttribute("CheckInfo", cb.getPreAdvice());
			request.setAttribute("CheckName", cb.getCheckName());
			request.setAttribute("CheckTime", cb.getCheckTime());
			sql = "select * from TB_APPROVEINFO where REPORTID=?";
			ApproveBean ab = db.queryApproveInfoBean(sql, new String[]{id});
			request.setAttribute("ApproveName", ab.getApproveName());
			request.setAttribute("ApproveTime", ab.getApproveTime());
			request.setAttribute("IsXY", ab.getIsXY());
			request.setAttribute("HeadAdvice", ab.getHeadAdvice());
		}
		else if(type.equals("check")){//核实
			//coding test
			sql = "select * from TB_CHECKINFO where REPORTID=?";
			db = new DBTools();
			ArrayList beReportList = db.queryCheckInfoList(sql, new String[]{id});
			if(beReportList != null && beReportList.size() > 0)
			{
				CheckEventForm tmpcef = (CheckEventForm)beReportList.get(0);
				if(tmpcef.getPreAdvice() != null)
				{
					request.setAttribute("PreAdvice", tmpcef.getPreAdvice());
				}else
				{
					request.setAttribute("PreAdvice", "无");
				}
				eb.setBeReportList(beReportList);
			}
			if(eb != null)
			{
				ArrayList result = new ArrayList();
				result.add(eb);
				request.getSession().setAttribute("reportID", eb.getReportID());
				eventManageForm.setRecordNotFind("false");
				eventManageForm.setRecordList(result);
			}
			else
			{
				eventManageForm.setRecordNotFind("true");
			}
		//coding test
		}
		request.setAttribute("ReportID", id);
		return mapping.findForward(type);
	}
	/**
	 * 编辑案件信息，用于跳转
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward editInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String id = request.getParameter("id");
		
		String sql = "select * from TB_REPORTINFO where REPORTID=?";
		DBTools db = new DBTools();
		EventBean eb = db.queryEvent(sql, new String[]{id});
		if(eb != null)
		{
			ArrayList result = new ArrayList();
			result.add(eb);
			eventManageForm.setRecordNotFind("false");
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
		}
		
		return mapping.findForward("editInfo");
	}
	/**
	 * 编辑完成后，保存到数据库
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 */
	public ActionForward editEvent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = eventManageForm.getReportID();
		String reportReason = eventManageForm.getReportReason();
		String reportContent = eventManageForm.getReportContent();
		DBTools dbTools = new DBTools();
		EventBean eb = new EventBean();
		eb.setReportReason(reportReason);
		eb.setReportID(reportID);
		eb.setReportContent(reportContent);
		boolean result = dbTools.updateReportInfo(eb);
		if(result)
		{
			String filePath = request.getSession().getServletContext().getRealPath("/")+"/attachment/";
			String loginName = (String)request.getSession().getAttribute("LoginName");
			String createName = (String)request.getSession().getAttribute("UserName");
			String path1 = request.getSession().getServletContext().getRealPath("/") + "/temp/" + loginName + "/";
			String path2 = filePath + reportID;
			String relDirectory = "attachment" + "/" + reportID;
			result = SystemShare.IOCopy(path1, path2, relDirectory, createName);
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "保存成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "保存失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 打印举报信息，生成《收件阅办单》
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward print(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		//String templatePath = request.getSession().getServletContext().getRealPath("/") + "web\\template\\sjybd.docx";
		String templatePath = SystemConstant.GetServerPath() + "/web/template/sjybd.docx";
		String templateName = SystemConstant.TemplateLocalPath + "sjybd.docx";
		//templatePath = templatePath.replaceAll("\\\\","//");
		String sql = "select * from TB_REPORTINFO where REPORTID=?";
		DBTools db = new DBTools();
		EventBean eb = db.queryEvent(sql, new String[]{id});
		/*
		sql = "select * from TB_BEREPORTPE where REPORTID='" + id + "'";
		ArrayList beReportList = db.queryBeReport(sql);
		if(beReportList.size() > 0)
		{
			eb.setBeReportList(beReportList);
		}
		*/
		String serialNum = eb.getSerialNum();
		String numYear =serialNum.substring(0, 4);
		String numID =serialNum.substring(4, serialNum.length());
		
		String recvTime = eb.getCreateTime();
		String year = recvTime.substring(0, 4);
		String month = recvTime.substring(5, 7);
		String day = recvTime.substring(8, 10);
		PrintBean pb = new PrintBean();
		pb.setReportID(id);
		pb.setReportName(eb.getReportName());
		pb.setTemplatePath(templatePath);
		pb.setTemplateName(templateName);
		pb.setDay(day);
		pb.setMonth(month);
		pb.setNumID(numID);
		pb.setNumYear(numYear);
		pb.setYear(year);
		request.setAttribute("PrintBean", pb);
		return mapping.findForward("print");
	}
	/**
	 * 恢复已经删除的事件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 */
	public ActionForward recovery(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		
		String sql = "update TB_REPORTINFO set ISDELETE='0' where REPORTID=?";
		DBTools dbTools = new DBTools();
		boolean result = dbTools.insertItem(sql, new String[]{id});
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "恢复事件成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "恢复事件失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 依托单位调查情况及意见管理
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward deptAdviceManage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		String sql = "select * from TB_DEPTADVICE where REPORTID=?";
		request.setAttribute("reportID", reportID);
		request.getSession().setAttribute("deptReportID", reportID);
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.queryDeptAdvice(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		/*
		String templatePath = SystemConstant.GetServerPath() + "/web/template/ytdwdch.doc";
		String templateName = SystemConstant.TemplateLocalPath + "ytdwdch.doc";
		request.setAttribute("templatePath", templatePath);
		request.setAttribute("templateName", templateName);
		*/
		return mapping.findForward("deptAdviceManage");
	}
	/*
	 * 专家鉴定意见
	 */
	public ActionForward expertAdviceManage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		request.getSession().setAttribute("expertReportID", reportID);
		String sql = "select * from TB_EXPERTADVICE where REPORTID=?";
		
		
		String time = SystemShare.GetNowTime("yyyy-MM-dd");
		String year=time.substring(0, 4);
		String month=time.substring(5, 7);
		String day=time.substring(8, 10);
		
		request.setAttribute("year", year);
		request.setAttribute("month", month);
		request.setAttribute("day", day);
		request.setAttribute("reportID", reportID);
		
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.queryExpertAdvice(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		return mapping.findForward("expertAdviceManage");
	}
	/**
	 * 当事人陈述
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward litigantStateManage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		String sql = "select * from TB_LITIGANTSTATE where REPORTID=?";
		request.setAttribute("reportID", reportID);
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.queryLitigantState(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		return mapping.findForward("litigantStateManage");
	}
	
	/*
	 *  faculty advice manage
	 *  
	 */
	public ActionForward facultyAdviceManage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm = (EventManageForm)form;
		String reportId = request.getParameter("id");
		String sql = "select a.*,b.ZZNAME as FACULTYNAME,c.SERIALNUM,c.REPORTNAME,c.BEREPORTNAME,c.OFFICER from TB_FACULTYADVICE a, SYS_ZZINFO b, TB_REPORTINFO c where a.REPORTID=? and a.FACULTYID=b.ZZID and c.REPORTID=?";
		request.setAttribute("reportId", reportId);
		DBTools dbTools = new DBTools();
		String facultys = dbTools.querySingleData("TB_REPORTINFO", "FACULTY", "REPORTID", reportId);
		String officer = dbTools.querySingleData("TB_REPORTINFO", "OFFICER", "REPORTID", reportId);
		ArrayList result = dbTools.queryFacultyAdvice(sql, "1", new String[]{reportId, reportId});
		if(result.size() > 0) {
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		} else {
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		request.setAttribute("facultys", facultys);
		request.getSession().setAttribute("OFFICER", officer);
		return mapping.findForward("facultyAdviceManage");
	}
	
	/**
	 * 分析结论
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward analysisAndInvestigation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		String sql = "select * from TB_ANALYSANDINVE where REPORTID=?";
		request.setAttribute("reportID", reportID);
		request.getSession().setAttribute("AIReportID", reportID);
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.queryanalysisAndInvestigation(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		/*
		String templatePath = SystemConstant.GetServerPath() + "/web/template/ytdwdch.doc";
		String templateName = SystemConstant.TemplateLocalPath + "ytdwdch.doc";
		request.setAttribute("templatePath", templatePath);
		request.setAttribute("templateName", templateName);
		*/
		return mapping.findForward("analysisAndInvestigation");
	}
	
	/**
	 * 处理建议
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward treatmentSuggestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		String sql = "select * from TB_TREATANDSUG where REPORTID=?";
		request.setAttribute("reportID", reportID);
		request.getSession().setAttribute("tsReportID", reportID);
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.querytreatmentSuggestion(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		/*
		String templatePath = SystemConstant.GetServerPath() + "/web/template/ytdwdch.doc";
		String templateName = SystemConstant.TemplateLocalPath + "ytdwdch.doc";
		request.setAttribute("templatePath", templatePath);
		request.setAttribute("templateName", templateName);
		*/
		return mapping.findForward("treatmentSuggestion");
	}
	/**
	 * 会议结论
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward conclusionOfMeet(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		String sql = "select * from TB_CONOFMEET where REPORTID=?";
		request.setAttribute("reportID", reportID);
		request.getSession().setAttribute("cmReportID", reportID);
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.queryconOfMeet(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		/*
		String templatePath = SystemConstant.GetServerPath() + "/web/template/ytdwdch.doc";
		String templateName = SystemConstant.TemplateLocalPath + "ytdwdch.doc";
		request.setAttribute("templatePath", templatePath);
		request.setAttribute("templateName", templateName);
		*/
		return mapping.findForward("conclusionOfMeet");
	}
	/**
	 * 处理决定管理
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward handleDecideManage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		String sql = "select * from TB_HANDLEDECIDE where REPORTID=?";
		request.setAttribute("reportID", reportID);
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.queryHandleDecide(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		return mapping.findForward("handleDecideManage");
	}
	/**
	 * 添加备注信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward addBZ(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = eventManageForm.getReportID();
		String bz = eventManageForm.getBz();
		String sql = "update TB_REPORTINFO set BZ=? where REPORTID=?";
		DBTools dbTools = new DBTools();
		boolean result = dbTools.insertItem(sql, new String[]{bz, reportID});
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "添加备注成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "添加备注失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 高级检索，输入多个检索条件
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward gjSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String serialNum = eventManageForm.getSerialNum();
		String reportName = eventManageForm.getReportName();
		String beReportName = eventManageForm.getBeReportName();
		String dept = eventManageForm.getDept();
		String jbBeginTime = eventManageForm.getJbBeginTime();
		String jbEndTime = eventManageForm.getJbEndTime();
		String createBeginTime = eventManageForm.getCreateBeginTime();
		String createEndTime = eventManageForm.getCreateEndTime();
		//String reportReason = eventManageForm.getReportReason();
		String conference = eventManageForm.getConference();
		//String conference = request.getParameter("org6.conference");
		String status = eventManageForm.getStatus();
		String orderWay = eventManageForm.getOrderWay();
		String faculty = eventManageForm.getFaculty();
		
		//多个表联合查询时，不能判断使用到了哪个表，如果将所有的表名都列在where语句后面，则查询出的结果集会有重复！此问题出现在按照“会议名称”进行查询的时候
		//所以需要灵活的添加数据库表
		//String sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM from TB_REPORTINFO a, SYS_DATA_DIC b where a.ISDELETE='0' and a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "'  and c.REPORTID=a.REPORTID";
		String sql = "";
		ArrayList<String> paramList = new ArrayList<String>();
		String sqlResult = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM,a.OFFICER,a.MERGEID,a.LASTTIME,a.RECORDER from";
		String sqlTable = " TB_REPORTINFO a, SYS_DATA_DIC b";
		String sqlEnd = " where a.ISDELETE='0' and a.STATUS=b.CODE and b.CODENAME=?";
		paramList.add(SystemConstant.sjzt);
		String isHead = (String)request.getSession().getAttribute("IsHead");
		String officer = (String)request.getSession().getAttribute("LoginName");
		if( isHead != null && isHead.equals("0")) {
			sqlEnd = " where a.OFFICER=? and a.ISDELETE='0' and a.STATUS=b.CODE and b.CODENAME=?";
			paramList.add(0, officer);
		}
		
		String temp = "";
		
		boolean beReportPeFlag = false;
		
		if(serialNum != null && !serialNum.equals(""))//如果输入了编号，则其他的条件都可以忽略了
		{
			temp += " and a.SERIALNUM=?";
			paramList.add(serialNum);
		}
		else
		{
			//是否勾选了匿名举报或实名举报单选框
			String isNi = request.getParameter("isNi");
			AESCrypto aes = new AESCrypto();
			String key = "TB_REPORTINFO";
			if(isNi != null && isNi.equals("匿名"))//查询匿名举报列表
			{
				temp += " and hex(a.REPORTNAME) = ?";
				paramList.add(SystemShare.getHexString(aes.createEncryptor("匿名举报", key)));
			}
			else if(isNi != null && isNi.equals("实名"))//查询所有实名举报列表
			{
				temp += " and hex(a.REPORTNAME) <> ?";
				paramList.add(SystemShare.getHexString(aes.createEncryptor("匿名举报", key)));
			}
			else if(isNi != null && isNi.equals("高相似度"))//查询所有高相似度案件列表
			{
				temp += " and hex(a.REPORTNAME) = ?";
				paramList.add(SystemShare.getHexString(aes.createEncryptor("信息中心", key)));
			}
			else if(reportName != null && !reportName.equals(""))
			{
				temp += " and hex(a.REPORTNAME) = ?";
				paramList.add(SystemShare.getHexString(aes.createEncryptor(reportName, key)));
			}
			if(beReportName != null && !beReportName.equals(""))
			{
				beReportPeFlag = true;
			}
			if(dept != null && !dept.equals(""))
			{
				beReportPeFlag = true;
			}
			if(faculty != null && !faculty.equals(""))
			{
				temp += " and a.FACULTY like ?";
				paramList.add("%" + faculty + "%");
			}
			if(jbBeginTime != null && !jbBeginTime.equals(""))
			{
				temp += " and a.REPORTTIME >= ?";
				paramList.add(jbBeginTime);
			}
			if(jbEndTime != null && !jbEndTime.equals(""))
			{
				temp += " and a.REPORTTIME <= ?";
				paramList.add(jbEndTime);
			}
			if(createBeginTime != null && !createBeginTime.equals(""))
			{
				temp += " and a.CREATETIME >= ?";
				paramList.add(createBeginTime);
			}
			if(createEndTime != null && !createEndTime.equals(""))
			{
				temp += " and a.CREATETIME <= '" + createEndTime + "'";
				paramList.add(createEndTime);
			}
			/*
			if(!reportReason.equals(""))
			{
				AESCrypto aes = new AESCrypto();
				String key = "TB_REPORTINFO";
				temp += " and 1=dbo.compare_image1(a.REPORTREASON,0x" + SystemShare.getHexString(aes.createEncryptor(reportReason, key)) + ") ";
			}
			*/
			if(conference != null && !conference.equals(""))
			{
				temp += " and a.REPORTID in (select distinct REPORTID from TB_HANDLEDECIDE where CONFERENCE like ?";
				paramList.add("%" + conference + "%");
			}
			if(status != null && !status.equals(""))
			{
				temp += " and a.STATUS=?";
				paramList.add(status);
			}
			if(orderWay != null && !orderWay.equals("") && !orderWay.matches(".*[=<>].*"))
			{
				temp += " order by " + orderWay + " desc";
			}
		}
		//如果使用到了TB_BEREPORTPE
		if(beReportPeFlag)
		{
			temp += " and a.REPORTID in (select distinct REPORTID from TB_BEREPORTPE where 1=1 ";
			if(beReportName != null && !beReportName.equals(""))
			{
				AESCrypto aes = new AESCrypto();
				String key = "TB_BEREPORTPE";
				temp += " and hex(BEREPORTNAME) = ?";
				paramList.add(SystemShare.getHexString(aes.createEncryptor(beReportName, key)));
			}
			if(dept != null && !dept.equals(""))
			{
				AESCrypto aes = new AESCrypto();
				String key = "TB_BEREPORTPE";
				beReportPeFlag = true;
				temp += " and hex(DEPTNAME) = ?";
				paramList.add(SystemShare.getHexString(aes.createEncryptor(dept, key)));
			}
			temp += ")";
		}
		sql = sqlResult + sqlTable + sqlEnd + temp;
		String[] params = paramList.toArray(new String[0]);
		
		request.getSession().setAttribute("GjSearch", "true");
		request.getSession().setAttribute("GjSearchSql", sql);
		request.getSession().setAttribute("GjSearchParams", params);
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		json.put("statusCode", 200);
		json.put("message", "正在检索中，请稍候...");
		json.put("callbackType", "closeCurrent");
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 撰写调查报告
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward surveyReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String id = request.getParameter("id");
		
		DBTools dbTools = new DBTools();
		String templatePath = "";
		String checkInfo = "";
		String deptAdvice = "";
		String expertAdvice = "";
		String litigantState = "";
		String beReportName = "";
		String reportContent = "";
		String facultyAdvice = "";
		
		String filePath = dbTools.querySingleData("TB_SURVEYREPORT", "FILENAME", "REPORTID", id);
		boolean isEdit = false;
		if(!filePath.equals(""))
		{
			String dicPath = request.getSession().getServletContext().getRealPath("/")+"/attachment/";
			String tempFilePath = dicPath + filePath;
			if((new File(tempFilePath)).exists())//如果存在，则得到路径
			{
				//templatePath = SystemConstant.GetServerPath() + "/attachment/" +  filePath;
				templatePath = "attachment/" +  filePath;
				request.setAttribute("IsEdit", "1");
				isEdit = true;
			}
			else//不存在，则继续使用模板，例如：人工删除或系统出错
			{
				request.setAttribute("IsEdit", "0");
				isEdit = false;
				//templatePath = SystemConstant.GetServerPath() + "/web/template/dcbg.doc";
				templatePath = "web/template/dcbg.doc";
			}
		}
		else
		{
			//templatePath = SystemConstant.GetServerPath() + "/web/template/dcbg.doc";
			templatePath = "web/template/dcbg.doc";
			request.setAttribute("IsEdit", "0");
			isEdit = false;
		}System.out.println("dcbg:" + isEdit);
		//如果不是编辑，则查询数据库，得到各个默认的信息
		if(!isEdit)
		{
			String sql = "select * from TB_REPORTINFO where REPORTID=?";
			EventBean eb = dbTools.queryEvent(sql, new String[]{id});
			beReportName = eb.getBeReportName();
			reportContent = eb.getReportContent();

			checkInfo = dbTools.querySingleData("TB_CHECKINFO", "PREADVICE", "REPORTID", id);
			ArrayList result = new ArrayList();
			sql = "select * from TB_DEPTADVICE where REPORTID = ? and ISFK=?";
			result = dbTools.queryDeptAdvice(sql, "1", new String[]{id, "1"});
			DeptAdvice da;
			if(result.size() > 0)
			{
				for(int i = 0; i < result.size(); )
				{
					da = (DeptAdvice)result.get(i);
					deptAdvice += (++i) + "、" + da.getDept() + "，时间：" + da.getTime() + "\n" + da.getAdvice() + "\n";
				}
			}
			
			sql = "select * from TB_EXPERTADVICE where REPORTID=? and ISFK=?";
			result = dbTools.queryExpertAdvice(sql, "1", new String[]{id, "1"});
			ExpertAdvice ea;
			if(result.size() > 0)
			{
				for(int i = 0; i < result.size(); )
				{
					ea = (ExpertAdvice)result.get(i);
					expertAdvice += "专家" + (++i) + "：\n" + ea.getAdvice() + "\n";
				}
			}
			
			sql = "select * from TB_LITIGANTSTATE where REPORTID=?";
			result = dbTools.queryLitigantState(sql, "1", new String[]{id});
			LitigantState ls;
			if(result.size() > 0)
			{
				for(int i = 0; i < result.size(); )
				{
					ls = (LitigantState)result.get(i);
					litigantState += (++i) + "、" + ls.getLitigantName() + "的陈述\n" + ls.getLitigantContent() + "\n";
				}
			}

			sql = "select a.*, b.ZZNAME as FACULTYNAME from TB_FACULTYADVICE a, SYS_ZZINFO b where REPORTID=? and ISFK=? and a.FACULTYID=b.ZZID";
			result = dbTools.queryFacultyAdvice(sql, "1", new String[]{id, "1"});
			FacultyAdviceBean fab;
			if(result.size() > 0)
			{
				for(int i = 0; i < result.size(); )
				{
					fab = (FacultyAdviceBean)result.get(i);
					facultyAdvice += (++i) + "、" + fab.getFacultyName() + "的意见：\n" + fab.getAdvice() + "\n";
				}
			}
		}
		SurveyReportBean srb = new SurveyReportBean();
		srb.setBeReportName(beReportName);
		srb.setCheckInfo(checkInfo);
		srb.setDeptAdvice(deptAdvice);
		srb.setExpertAdvice(expertAdvice);
		srb.setLitigantState(litigantState);
		//srb.setReportContent("");
		srb.setReportContent(reportContent);
		// srb.setFacultyAdvice("赞成并尊重监委会意见");
		srb.setFacultyAdvice(facultyAdvice);
		
		String userName = (String)request.getSession().getAttribute("UserName");
		
		String serialNum = dbTools.querySingleData("TB_REPORTINFO","SERIALNUM", "REPORTID", id);
		String time = SystemShare.GetNowTime("yyyy-MM-dd");
		String describe = time + "," + userName + "编辑调查报告";
		//插入处理过程到数据库中
		dbTools.InsertHandleProcess(id, userName, SystemConstant.HP_SURVEYREPORT, SystemConstant.SS_SURVEYING, SystemConstant.LCT_DCBG, describe);
		
		
		request.setAttribute("SerialNum", serialNum);
		request.setAttribute("ReportID", id);
		request.setAttribute("ServerPath", SystemConstant.GetServerPath());
		request.setAttribute("templatePath", templatePath);
		request.setAttribute("SurveyReportBean", srb);
		return mapping.findForward("surveyReport");
	}
	/**
	 * 结束事件
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 */
	public ActionForward closeEvent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DBTools dbTools = new DBTools();
		String reportID = request.getParameter("id");
		String sql = "update TB_REPORTINFO set STATUS=? where REPORTID=?";
		boolean result = dbTools.insertItem(sql, new String[]{SystemConstant.SS_END, reportID});
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "该事件已成功结束！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "该事件结束失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 导出excel
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward export(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DBTools db = new DBTools();
		String jdID = request.getParameter("id");
		String jdName = SystemShare.GetJDName(jdID);
		String sql = (String)request.getSession().getAttribute("query" + jdName + "Sql");
		String[] params = (String[])request.getSession().getAttribute("query" + jdName + "Params");
		try
		{
			String fname = "event";
			OutputStream os = response.getOutputStream();
			response.reset();
			response.setHeader("Content-disposition", "attachment;filename=" + fname + ".xls");
			response.setContentType("application/msexcel");
			ResultSet rs = db.queryRsList(sql, params);
			rs.last();
			int length = rs.getRow();
			rs.beforeFirst();
			ArrayList result = db.queryEventList(rs, length);
			ExcelTools et = new ExcelTools();
			//et.createSheet(rs, os);
			String sheetName = "收文汇总表";
			ArrayList titleList = new ArrayList();
			/*titleList.add("编号");
			titleList.add("举报人姓名");
			titleList.add("被举报人姓名");
			titleList.add("举报事由");
			titleList.add("举报时间");
			titleList.add("状态");*/
			titleList.add("收文日期");
			titleList.add("收文编号");
			titleList.add("来文主体");
			titleList.add("反映情况");

			titleList.add("经办人");
			titleList.add("处理状态");
			titleList.add("处理建议");
			titleList.add("批准情况");
			titleList.add("办理情况");
			et.createEventSheet(result, os, sheetName,2, titleList);
			rs.close();
		}
		catch(Exception e)
		{
			DebugLog.WriteDebug(e);
		}
		return null;
	}
	/**
	 * 导出excel
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward exportTjResult(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DBTools db = new DBTools();
		String sql = (String)request.getSession().getAttribute("queryTJStatusSql");
		String[] params = (String[])request.getSession().getAttribute("queryTJStatusParams");
		try
		{
			String fname = "event";
			OutputStream os = response.getOutputStream();
			response.reset();
			response.setHeader("Content-disposition", "attachment;filename=" + fname + ".xls");
			response.setContentType("application/msexcel");
			ResultSet rs = db.queryRsList(sql, params);
			rs.last();
			int length = rs.getRow();
			rs.beforeFirst();
			ArrayList result = db.queryEventList(rs, length);
			ExcelTools et = new ExcelTools();
			//et.createSheet(rs, os);
			String sheetName = "收文汇总表";
			ArrayList titleList = new ArrayList();
			titleList.add("编号");
			titleList.add("举报人姓名");
			titleList.add("被举报人姓名");
			titleList.add("举报事由");
			titleList.add("举报时间");
			titleList.add("状态");
			et.createEventSheet(result, os, sheetName,2, titleList);
			rs.close();
		}
		catch(Exception e)
		{
			DebugLog.WriteDebug(e);
		}
		return null;
	}
	/**
	 * 复议申请管理
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward fyApplyManage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String reportID = request.getParameter("id");
		String sql = "select * from TB_FYAPPLY where REPORTID=?";
		request.setAttribute("reportID", reportID);
		DBTools dbTools = new DBTools();
		ArrayList result = dbTools.queryFYApplyList(sql, "1", new String[]{reportID});
		if(result.size() > 0)
		{
			eventManageForm.setRecordNotFind("false");
			request.setAttribute("totalRows", result.size());
			eventManageForm.setRecordList(result);
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
			request.setAttribute("totalRows", "0");
		}
		return mapping.findForward("fyApplyManage");
	}
	/**
	 * 对提出异议申请的事件进行重新调查
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward reSurvey(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String reportID = request.getParameter("id");
		
		DBTools dbTools = new DBTools();
		
		String time = SystemShare.GetNowTime("yyyy-MM-dd");
		
		String sql = "update TB_REPORTINFO set STATUS=?,LASTTIME=? where REPORTID=?";
		String[] params = new String[]{SystemConstant.SS_SURVEYING, time, reportID};
		boolean result = dbTools.insertItem(sql, params);
		
		String createName = (String)request.getSession().getAttribute("UserName");
		//插入处理过程到数据库中
		result = dbTools.InsertHandleProcess(reportID, createName, SystemConstant.HP_RESURVEY, SystemConstant.SS_SURVEYING, "", "");
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "设置成功，该事件重新进入“立案调查阶段”，可以继续开展调查！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "设置失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 生成收件阅办单
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward createSJYBD(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		String id = request.getParameter("id");
		
		DBTools dbTools = new DBTools();
		String templatePath = "";

		String filePath = dbTools.querySingleData("TB_SJYBDINFO", "FILEPATH", "REPORTID", id);
		boolean isEdit = false;
		if(filePath != null && !filePath.equals(""))
		{
			String dicPath = request.getSession().getServletContext().getRealPath("/")+"/attachment/";
			String tempFilePath = dicPath + filePath;
			if((new File(tempFilePath)).exists())//如果存在，则得到路径
			{
				templatePath = SystemConstant.GetServerPath() + "/attachment/" +  filePath;
				request.setAttribute("IsEdit", "1");
				isEdit = true;
			}
			else//不存在，则继续使用模板，例如：人工删除或系统出错
			{
				request.setAttribute("IsEdit", "0");
				isEdit = false;
				templatePath = SystemConstant.GetServerPath() + "/web/template/sjybd.doc";
			}
		}
		else
		{
			templatePath = SystemConstant.GetServerPath() + "/web/template/sjybd.doc";
			request.setAttribute("IsEdit", "0");
			isEdit = false;
		}
		//如果不是编辑，则查询数据库，得到各个默认的信息
		if(!isEdit)
		{
			String sql = "select * from TB_REPORTINFO where REPORTID=?";
			DBTools db = new DBTools();
			EventBean eb = db.queryEvent(sql, new String[]{id});

			String serialNum = eb.getSerialNum();
			String numYear =serialNum.substring(0, 4);
			String numID =String.valueOf(Integer.parseInt(serialNum.substring(4, serialNum.length())));
			
			String recvTime = eb.getCreateTime();
			String year = recvTime.substring(0, 4);
			String month = recvTime.substring(5, 7);
			String day = recvTime.substring(8, 10);
			SjybdBean sjybdBean = new SjybdBean();
			sjybdBean.setReportID(id);
			sjybdBean.setReportName(eb.getReportName());

			sjybdBean.setDay(day);
			sjybdBean.setMonth(month);
			sjybdBean.setNumID(numID);
			sjybdBean.setNumYear(numYear);
			sjybdBean.setYear(year);
			
			request.setAttribute("SJYBDBean", sjybdBean);
		}
		
		request.setAttribute("ReportID", id);
		request.setAttribute("ServerPath", SystemConstant.GetServerPath());
		request.setAttribute("templatePath", templatePath);
		
		return mapping.findForward("createSJYBD");
	}
	/**
	 * 中途调查结果确定，可以直接结束案件！！！
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward midCloseEvent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String reportID = request.getParameter("id");
		String fkInfo = SystemConstant.FK_END;//已结案！
		String approveTime = SystemShare.GetNowTime("yyyy-MM-dd");//2015-10-20
		String sql = "update TB_REPORTINFO set STATUS=? where REPORTID=?";
		String[] params = new String[]{SystemConstant.SS_END, reportID};
		DBTools dbTools = new DBTools();
		boolean result = dbTools.insertItem(sql, params);
		//插入反馈信息到门户数据库中
		result = result && dbTools.InsertFKInfo(reportID, fkInfo, approveTime);
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "结束案件成功，可以在“全部事件”中查询到该案件！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "结束案件失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 不予立案
	 * 
	 */
	public ActionForward notRegister(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DBTools db = new DBTools();
		String reportID = request.getParameter("id");//20151020161248
		String approveTime = SystemShare.GetNowTime("yyyy-MM-dd");//2015-10-20
		
		String status = SystemConstant.SS_NOT_REGISTER;//50
		String fkInfo = SystemConstant.FK_APPROVEEVENT6;//经审核，该事件与诚信办无关，对该事件不予立案！
		String flowStr = SystemConstant.LCT_BYLIA;//不予立案
		String processStr = SystemConstant.HP_BYLA;//领导审核完毕，对该事件不予立案
		String gyDesc = approveTime + "，领导审核完毕，对该事件不予立案！";
		String approveName = (String)request.getSession().getAttribute("UserName");

		//更新消息提醒状态，使得“事件审批”栏目不会再重复出现该事件
		String sql = "update TB_MSGNOTIFY set ISHANDLE='1' where RECVNAME=? and REPORTID=?";
		String[] params = new String[]{approveName, reportID};
		boolean result= db.insertItem(sql, params);
				
		//插入反馈信息到门户数据库中
		db.InsertFKInfo(reportID, fkInfo, approveTime);

		//将事件状态修改为“不予立案”
		sql = "update TB_REPORTINFO set STATUS=? where REPORTID=?";
		params = new String[]{status, reportID};
		result = db.insertItem(sql, params);
			
		//插入处理过程到数据库中
		String describe = approveTime + ",办公人员" + approveName + "审批该事件,审核意见详情请查看《审核信息》一栏";
		db.InsertHandleProcess(reportID, approveName, SystemConstant.HP_BYLA, SystemConstant.SS_NOT_REGISTER, SystemConstant.LCT_BYLIA, describe);
			
		//控制“立案调查”和“不予调查”的流程图节点的显示
		db.InsertHandleProcess(reportID, approveName, processStr, SystemConstant.SS_NOT_REGISTER, flowStr, gyDesc);
			
		//写入日志文件
		db.insertLogInfo(approveName, SystemConstant.LOG_APPROVE, approveName+"审批事件,不予立案，事件编号为：" + reportID, request.getRemoteAddr());

		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "不予立案成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "事件不予立案失败");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 暂不立案
	 * 
	 */
	public ActionForward tempNotRegister(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DBTools db = new DBTools();
		String reportID = request.getParameter("id");//20151020161248
		String approveTime = SystemShare.GetNowTime("yyyy-MM-dd");//2015-10-20
		
		String status = SystemConstant.SS_TEMP_NOT_REGISTER;//51
		String fkInfo = SystemConstant.FK_APPROVEEVENT7;//经审核，对该事件暂不立案！
		String flowStr = SystemConstant.LCT_ZBLA;//暂不立案
		String processStr = SystemConstant.HP_ZBLA;//领导审核完毕，对该事件暂不立案
		String gyDesc = approveTime + "，领导审核完毕，对该事件暂不立案！";
		String approveName = (String)request.getSession().getAttribute("UserName");

		//更新消息提醒状态，使得“事件审批”栏目不会再重复出现该事件
		String sql = "update TB_MSGNOTIFY set ISHANDLE='1' where RECVNAME=? and REPORTID=?";
		String[] params = new String[]{approveName, reportID};
		boolean result= db.insertItem(sql, params);
				
		//插入反馈信息到门户数据库中
		db.InsertFKInfo(reportID, fkInfo, approveTime);

		//将事件状态修改为“不予立案”
		sql = "update TB_REPORTINFO set STATUS=? where REPORTID=?";
		params = new String[]{status, reportID};
		result = db.insertItem(sql, params);
			
		//插入处理过程到数据库中
		String describe = approveTime + ",办公人员" + approveName + "审批该事件,审核意见详情请查看《审核信息》一栏";
		db.InsertHandleProcess(reportID, approveName, SystemConstant.HP_ZBLA, SystemConstant.SS_TEMP_NOT_REGISTER, SystemConstant.LCT_ZBLA, describe);
			
		//控制“立案调查”和“不予调查”的流程图节点的显示
		//db.InsertHandleProcess(reportID, approveName, processStr, SystemConstant.SS_TEMP_NOT_REGISTER, flowStr, gyDesc);
			
		//写入日志文件
		db.insertLogInfo(approveName, SystemConstant.LOG_APPROVE, approveName+"审批事件,暂不立案，事件编号为：" + reportID, request.getRemoteAddr());

		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "暂不立案成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "事件暂不立案失败");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**撤回
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward revocation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String reportID = request.getParameter("id");
		
		DBTools dbTools = new DBTools();
		
		String time = SystemShare.GetNowTime("yyyy-MM-dd");
		String status = "";
		String sql = "";
		
		sql = "select STATUS from TB_REPORTINFO where REPORTID=?";
		String[] params = new String[]{reportID};
		status = dbTools.queryStatus(sql, params);
		
		if(status.equals("11"))
		{
			sql = "update TB_REPORTINFO set STATUS=?,LASTTIME=?,isRev=? where REPORTID=?";
			params = new String[]{SystemConstant.SS_RECVEVENT, time,"1", reportID};
		}else if(status.equals("22"))
		{
			sql = "update TB_REPORTINFO set STATUS=?,LASTTIME=? where REPORTID=?";
			params = new String[]{SystemConstant.SS_CHECKEVENT, time, reportID};
		}
		boolean result = dbTools.insertItem(sql, params);
		
		String createName = (String)request.getSession().getAttribute("UserName");
		//插入处理过程到数据库中
		result = result && dbTools.InsertHandleProcess(reportID, createName, SystemConstant.HP_AJCH, status, "", "");
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "设置成功，该案件撤回至上一状态！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "设置失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	/**上传调查报告
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ActionForward uploaddcbg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		request.getSession().setAttribute("ID", id);
		return mapping.findForward("uploaddcbg");
	}
	public ActionForward savedcbg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		DBTools dbTools = new DBTools();
		String loginName = (String)request.getSession().getAttribute("LoginName");
		String id = (String)request.getSession().getAttribute("ID");
		
		String sql = "insert into TB_CONOFMEET(REPORTID,ATTACHNAMEF) values(?,?)";
		String attachname = id + "/" +(String)request.getSession().getAttribute("EventAttachName");
		dbTools.insertItem(sql, new String[]{id,attachname});
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		String filePath = request.getSession().getServletContext().getRealPath("/")+"/attachment/";
		//String path1 = filePath + "temp";
		String path1 = request.getSession().getServletContext().getRealPath("/") + "/temp/" + loginName + "/";
		String path2 = filePath + id;
		//将临时文件夹中的附件转存到以警情编号为目录的文件夹下
		//获得服务器的IP地址路径，存放在数据库中，便于下载
		String relDirectory = "attachment/" + id;
		String createName = (String)request.getSession().getAttribute("UserName");
		boolean result = SystemShare.IOCopy(path1, path2, relDirectory, createName);
		
		if(result)
		{
			//防止高级检索功能模块执行
			request.getSession().setAttribute("GjSearch", "false");
			json.put("statusCode", 200);
			json.put("message", "操作成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "操作失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	
	public ActionForward mergeCase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		EventManageForm eventManageForm =  (EventManageForm) form;
		//得到查询详情的类别：举报信息、核实信息等等
		String id = request.getParameter("id");
		String sql = "select * from TB_REPORTINFO where MERGEID=?";
		DBTools db = new DBTools();
		EventBean eb = db.queryEvent(sql, new String[]{id});
		/**
		String accessory = eb.getAccessory();
		if(accessory != null && !accessory.equals(""))
		{
			accessory = SystemConstant.GetServerPath() + "/" + accessory;
		}
		else
		{
			accessory = "";
		}
		eb.setAccessory(accessory);
		*/
		sql = "select * from TB_BEREPORTPE where REPORTID=?";
		ArrayList beReportList = db.queryBeReport(sql, new String[]{id});
		if(beReportList != null && beReportList.size() > 0)
		{
			
			eb.setBeReportList(beReportList);
		}
		if(eb != null)
		{
			ArrayList result = new ArrayList();
			result.add(eb);
			request.getSession().setAttribute("reportID", eb.getReportID());
			eventManageForm.setRecordNotFind("false");
			eventManageForm.setRecordList(result);
			if(eb.getIsRev().equals("1"))
				eventManageForm.setIsEdit("true");
		}
		else
		{
			eventManageForm.setRecordNotFind("true");
		}

		
		return mapping.findForward("mergeCase");
	}
	
	/*public ActionForward rollOutEvent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String reportID = request.getParameter("id");
		String sql = "update TB_REPORTINFO set STATUS=? where REPORTID=?";
		String[] params = new String[]{SystemConstant.SS_ROLLOUT, reportID};
		DBTools dbTools = new DBTools();
		boolean result = dbTools.insertItem(sql, params);
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "转出案件成功，可以在“全部事件”中查询到该案件！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "转出案件失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}*/
}