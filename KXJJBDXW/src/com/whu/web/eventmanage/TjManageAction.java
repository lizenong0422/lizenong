/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.eventmanage;

import java.io.UnsupportedEncodingException;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.CheckPage;
import com.whu.tools.DBTools;
import com.whu.tools.SystemConstant;
import com.whu.tools.XmlTools;
import com.whu.tools.crypto.AESCrypto;
import com.whu.web.common.SystemShare;

/** 
 * MyEclipse Struts
 * Creation date: 02-18-2014
 * 
 * XDoclet definition:
 * @struts.action path="/tjManageAction" name="tjManageForm" parameter="method" scope="request" validate="true"
 */
public class TjManageAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		//默认查询一年内的数据
		String nowDate = SystemShare.GetNowTime("yyyy-MM-dd");
		int year = Integer.valueOf(nowDate.substring(0,4));
		int lastYear = year - 1;
		String lastDate = String.valueOf(lastYear) + nowDate.substring(4, nowDate.length());
		
		String xAxisName = "状态";
		String yAxisName = "个数";
		String numberPrefix = "";
		
		//String sql = "select b.CAPTION as TITLE,count(*) as NUM from TB_REPORTINFO a, SYS_DATA_DIC b where a.ISDELETE='0' and a.STATUS=b.CODE and b.CODENAME='ZDBZ_SJZT' and a.LASTTIME >= '" + lastDate + "' and a.LASTTIME <= '" + nowDate + "' group by b.CAPTION";
		String sql = "select b.CAPTION as TITLE,count(*) as NUM from TB_REPORTINFO a, SYS_DATA_DIC b where a.ISDELETE='0' and a.STATUS=b.CODE and b.CODENAME='ZDBZ_SJZT' group by b.CAPTION";
		DBTools dbTools = new DBTools();
		ArrayList itemList = dbTools.queryTjInfo(sql, new String[0]);
		XmlTools xmlTool = new XmlTools();
		String result = xmlTool.CreateXml("事件状态统计", xAxisName, yAxisName, numberPrefix, itemList, "2");
		//String temp = xmlTool.CreateLineXml("每季度举报与受理总数","个数");
		request.setAttribute("chartXml", result);
		//request.setAttribute("chartXml2", temp);
		return mapping.findForward("init");
	}
	/**
	 * 根据输入的开始和结束时间进行统计
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward search(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		TjManageForm tjManageForm = (TjManageForm)form;
		String type = tjManageForm.getType();
		String tjBeginTime = tjManageForm.getTjBeginTime();
		String tjEndTime = tjManageForm.getTjEndTime();
		String temp = "";
		String title = "";
		XmlTools xmlTool = new XmlTools();
		if(type.equals("1"))//状态统计
		{
			if(tjBeginTime != null && !tjBeginTime.equals(""))
			{
				temp += " and a.LASTTIME >= '" + tjBeginTime + "'";
			}
			if(tjEndTime != null && !tjEndTime.equals(""))
			{
				temp += " and a.LASTTIME <= '" + tjEndTime + "'";
			}
			
			String xAxisName = "状态";
			String yAxisName = "个数";
			String numberPrefix = "";
			
			String sql = "select b.CAPTION as TITLE,count(*) as NUM from TB_REPORTINFO a, SYS_DATA_DIC b where a.ISDELETE='0' and a.STATUS=b.CODE and b.CODENAME='ZDBZ_SJZT' ";
			sql += temp;
			sql += "  group by b.CAPTION";
			DBTools dbTools = new DBTools();
			ArrayList itemList = dbTools.queryTjInfo(sql, new String[0]);
			
			//如果没有查询到任何数据，则添加一个空记录，否则前台显示出错
			if(itemList.size() == 0)
			{
				ItemAndNum iau = new ItemAndNum();
				iau.setItem("结果");
				iau.setNum("0");
				itemList.add(iau);
			}
			
			String result = xmlTool.CreateXml("事件状态统计", xAxisName, yAxisName, numberPrefix, itemList, "2");
			request.setAttribute("chartXml", result);
			tjManageForm.setStatusTj("true");
		}
		else if(type.equals("2"))//受理与立案数统计
		{
			String year = tjManageForm.getTjYear();
			if(year != null && year.equals(""))
			{
				Calendar cal = Calendar.getInstance();
				year = String.valueOf(cal.get(Calendar.YEAR));
			}
			DBTools dbTools = new DBTools();
			//查询受理个数
			String sql = "select substring(CREATETIME,1,7) as MONTH,count(*) as NUM from TB_REPORTINFO where substring(CREATETIME,1,4)=? group by substring(CREATETIME,1,7)";
			HashMap slTable = dbTools.querySlAndLaInfo(sql, new String[]{year});
			//查询立案个数
			sql = "select substring(APPROVETIME,1,7) as MONTH,count(*) as NUM from TB_APPROVEINFO where substring(APPROVETIME,1,4)=? group by substring(APPROVETIME,1,7)";
			HashMap laTable = dbTools.querySlAndLaInfo(sql, new String[]{year});
			
			String tempStr = xmlTool.CreateLineXml(year + "年每月受理与立案总数","个数", year, slTable, laTable);
			request.setAttribute("chartXml2", tempStr);
			tjManageForm.setStatusTj("false");
		}
		return mapping.findForward("init");
	}
	public ActionForward initResult(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TjManageForm tjManageForm = (TjManageForm) form;
		DBTools db = new DBTools();
		
		//获得阶段编号
		String status = request.getParameter("status");
		request.getSession().setAttribute("TjStatus", status);
		String sql = "";
		sql = "select a.ID,a.OFFICER,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM from TB_REPORTINFO a, SYS_DATA_DIC b where  a.STATUS=b.CODE and b.CODENAME=? and ISDELETE=? and a.STATUS=? order by REPORTTIME desc";

		String[] params = new String[]{SystemConstant.sjzt, "0", status};
		
		CheckPage pageBean = new CheckPage();
		int queryPageNo = 1;// 
		int rowsPerPage = 20;// 
		pageBean.setRowsPerPage(rowsPerPage);
		if (request.getParameter("queryPageNo") != null && request.getParameter("queryPageNo") != "") {
			queryPageNo = Integer.parseInt(request.getParameter("queryPageNo"));
		}
		pageBean.setQueryPageNo(queryPageNo);
		
		request.getSession().setAttribute("queryTJStatusSql", sql);
		request.getSession().setAttribute("queryTJStatusParams", params);
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryEventList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			tjManageForm.setRecordNotFind("false");
			tjManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			tjManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		//根据阶段的不同跳转到不同的页面
		return mapping.findForward("initResult");
	}
	/**
	 * 查询和分页
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward queryMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		TjManageForm tjManageForm = (TjManageForm) form;
		String operation = request.getParameter("operation");

		CheckPage pageBean = new CheckPage();
		String sql = "";
		String[] params = new String[0];
		int queryPageNo = 1;
		int rowsPerPage = 20;
		pageBean.setRowsPerPage(rowsPerPage);
		DBTools db = new DBTools();
		
		if (operation.equalsIgnoreCase("search") || operation.equalsIgnoreCase("select")) {
			String serialNum = tjManageForm.getSerialNum();
			String reportName = tjManageForm.getReportName();
			String beReportName = tjManageForm.getBeReportName();
			String jbBeginTime = tjManageForm.getJbBeginTime();
			String jbEndTime = tjManageForm.getJbEndTime();
			String temp = "";
			ArrayList<String> paramList = new ArrayList<String>();
			if(!serialNum.equals(""))
			{
				temp += " and a.SERIALNUM=?";
				paramList.add(serialNum);
			}
			if(!reportName.equals(""))
			{
				AESCrypto aes = new AESCrypto();
				String key = "TB_REPORTINFO";
				//调用sqlserver自定义函数比较加密后的数据是否相等。
				//compare_image1为比较函数，共两个参数，第一个为字段名称，第二个字段为加密后的数据（注意加密后为字节数据，需要转换为十六进制字符串，另在前面加上0x）
				temp += " and hex(a.REPORTNAME) = '" + SystemShare.getHexString(aes.createEncryptor(reportName, key)) + "'";
			}
			if(!beReportName.equals(""))
			{
				temp += " and a.REPORTID in (select distinct REPORTID from TB_BEREPORTPE where 1=1 ";
				if(!beReportName.equals(""))
				{
					AESCrypto aes = new AESCrypto();
					String key = "TB_BEREPORTPE";
					temp += " and hex(BEREPORTNAME) = '" + SystemShare.getHexString(aes.createEncryptor(beReportName, key)) + "'";
				}
				temp += ")";
			}
			if(!jbBeginTime.equals(""))
			{
				temp += " and a.REPORTTIME >= ?";
				paramList.add(jbBeginTime);
			}
			if(!jbEndTime.equals(""))
			{
				temp += " and a.REPORTTIME <= ?";
				paramList.add(jbEndTime);
			}
			String tjStatus = (String)request.getSession().getAttribute("TjStatus");
			sql = "select a.ID,a.REPORTID,b.CAPTION,a.REPORTNAME,a.REPORTTIME,a.BEREPORTNAME,a.REPORTREASON,a.SERIALNUM from TB_REPORTINFO a, SYS_DATA_DIC b where  a.STATUS=b.CODE and b.CODENAME='" + SystemConstant.sjzt + "' and a.ISDELETE='0' and a.STATUS=? " + temp + " order by REPORTTIME desc";
			paramList.add(0, tjStatus);
			params = paramList.toArray(new String[0]);
			request.getSession().setAttribute("queryTJStatusSql", sql);
			request.getSession().setAttribute("queryTJStatusParams", params);
		}
		else if(operation.equalsIgnoreCase("changePage")){
			sql = (String)request.getSession().getAttribute("queryTJStatusSql");
			params = (String[])request.getSession().getAttribute("queryTJStatusParams");
			if (request.getParameter("pageNum") != null && request.getParameter("pageNum") != "") {
				queryPageNo = Integer.parseInt(request.getParameter("pageNum"));
			}
		}
		
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		pageBean.setQueryPageNo(queryPageNo);
		
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryEventList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			tjManageForm.setRecordNotFind("false");
			tjManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			tjManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		return mapping.findForward("initResult");
	}
}