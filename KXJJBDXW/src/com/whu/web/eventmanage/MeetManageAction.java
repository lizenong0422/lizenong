/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.eventmanage;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.CheckPage;
import com.whu.tools.DBTools;
import com.whu.web.common.SystemShare;
import com.whu.web.eventbean.MeetInfo;

/** 
 * MyEclipse Struts
 * Creation date: 01-22-2014
 * 
 * XDoclet definition:
 * @struts.action path="/meetManageAction" name="meetManageForm" parameter="method" scope="request" validate="true"
 */
public class MeetManageAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		MeetManageForm meetManageForm = (MeetManageForm) form;
		CheckPage pageBean = new CheckPage();
		int queryPageNo = 1;// 
		int rowsPerPage = 20;// 
		pageBean.setRowsPerPage(rowsPerPage);
		if (request.getParameter("queryPageNo") != null && request.getParameter("queryPageNo") != "") {
			queryPageNo = Integer.parseInt(request.getParameter("queryPageNo"));
		}
		pageBean.setQueryPageNo(queryPageNo);
		String sql = "select * from TB_CONFERENCE";
		String[] params = new String[0];
		request.getSession().setAttribute("queryMeetSql", sql);
		request.getSession().setAttribute("querymeetParams", params);
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		DBTools db = new DBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryMeetList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			meetManageForm.setRecordNotFind("false");
			meetManageForm.setRecordList(result);
			
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			meetManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		//根据阶段的不同跳转到不同的页面
		return mapping.findForward("init");
	}
	/**
	 * 查询和分页
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward queryMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		MeetManageForm meetManageForm = (MeetManageForm) form;
		String operation = request.getParameter("operation");

		CheckPage pageBean = new CheckPage();
		String sql = "";
		String[] params = new String[0];
		int queryPageNo = 1;
		int rowsPerPage = 20;
		pageBean.setRowsPerPage(rowsPerPage);

		if (operation.equalsIgnoreCase("search") || operation.equalsIgnoreCase("select")) {
			String meetName = meetManageForm.getMeetName();
			String jbBeginTime = meetManageForm.getJbBeginTime();
			String jbEndTime = meetManageForm.getJbEndTime();
			String temp = "";
			ArrayList<String> paramList = new ArrayList<String>();
			if(meetName != null && !meetName.equals(""))
			{
				temp += " and MEETNAME like ?";
				paramList.add("%" + meetName + '%');
			}
			if(jbBeginTime != null && !jbBeginTime.equals(""))
			{
				temp += " and TIME >= ?";
				paramList.add(jbBeginTime);
			}
			if(jbEndTime != null && !jbEndTime.equals(""))
			{
				temp += " and TIME <= ?";
				paramList.add(jbEndTime);
			}
			sql = "select * from TB_CONFERENCE where 1=1 " + temp;
			params = paramList.toArray(new String[0]);
			request.getSession().setAttribute("queryMeetSql", sql);
			request.getSession().setAttribute("queryMeetParams", params);
		}
		
		else if(operation.equalsIgnoreCase("changePage")){
			sql = (String)request.getSession().getAttribute("queryMeetSql");
			params = (String[])request.getSession().getAttribute("queryMeetparams");
			if (request.getParameter("pageNum") != null && request.getParameter("pageNum") != "") {
				queryPageNo = Integer.parseInt(request.getParameter("pageNum"));
			}
		}
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		pageBean.setQueryPageNo(queryPageNo);
		DBTools db = new DBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryMeetList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			meetManageForm.setRecordNotFind("false");
			meetManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			meetManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		return mapping.findForward("init");
	}
	public ActionForward saveclose(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		MeetManageForm meetManageForm = (MeetManageForm) form;
		boolean result = false;
		try {
			String meetName = meetManageForm.getMeetName();
			String time = meetManageForm.getTime();
			//String members = meetManageForm.getMembers();
			String members = request.getParameter("orgw.wyName");
			String location = meetManageForm.getLocation();
			DBTools dbTools = new DBTools();
			String sqlStr = "insert into TB_CONFERENCE(MEETNAME,TIME,MEMBERS,LOCATION,STATUS) values(?, ?, ?, ?, ?)";
			String[] params = new String[]{meetName, time, members, location, "1"};
			result = dbTools.insertItem(sqlStr, params);			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "保存成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "保存失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		
		String ids = request.getParameter("ids");
		DBTools dbTool = new DBTools();
		boolean result = true;
		if(ids == null || ids.equals(""))
		{
			String id = request.getParameter("id");
			result = dbTool.deleteItemReal(id, "TB_CONFERENCE", "ID");
		}
		else
		{
			String[] arrID = ids.split(",");
			result = dbTool.deleteItemsReal(arrID, "TB_CONFERENCE", "ID");
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "删除成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "删除失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		MeetManageForm meetManageForm = (MeetManageForm) form;
		String id = request.getParameter("id");
		DBTools dbTools = new DBTools();
		
		String sql = "select * from TB_CONFERENCE where ID=?";
		MeetInfo mi = dbTools.queryMeetInfo(sql, new String[]{id});
		
		ArrayList result = new ArrayList();
		if(mi!=null)
		{
			result.add(mi);
			meetManageForm.setRecordNotFind("false");
			meetManageForm.setRecordList(result);
			return mapping.findForward("edit");
		}
		else
		{
			return mapping.findForward("initError");
		}
	}
	public ActionForward detail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		MeetManageForm meetManageForm = (MeetManageForm) form;
		String id = request.getParameter("id");
		DBTools dbTools = new DBTools();
		
		String sql = "select * from TB_CONFERENCE where ID=?";
		MeetInfo mi = dbTools.queryMeetInfo(sql, new String[]{id});
		
		ArrayList result = new ArrayList();
		if(mi!=null)
		{
			result.add(mi);
			meetManageForm.setRecordNotFind("false");
			meetManageForm.setRecordList(result);
			return mapping.findForward("detail");
		}
		else
		{
			return mapping.findForward("initError");
		}
	}
	public ActionForward editContent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		MeetManageForm meetManageForm = (MeetManageForm) form;
		String id = meetManageForm.getId();
		boolean result = false;
		DBTools dbTools = new DBTools();
		
		String meetName = meetManageForm.getMeetName();
		String time = meetManageForm.getTime();
		//String members = meetManageForm.getMembers();
		String members = request.getParameter("orgw.wyName");
		String location = meetManageForm.getLocation();
		
		String sql = "update TB_CONFERENCE set MEETNAME=?,TIME=?,MEMBERS=?,LOCATION=? where ID=?";
		String[] params = new String[]{meetName, time, members, location, id};
		result = dbTools.insertItem(sql, params);
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "修改会议信息成功！");
			json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "修改会议信息失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
}