/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.email;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.DBTools;
import com.whu.tools.EmailTools;

import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.fileupload.util.Streams;

/** 
 * MyEclipse Struts
 * Creation date: 07-02-2013
 * 
 * XDoclet definition:
 * @struts.action path="/newMailAction" name="newMailForm" input="/jsp/email/newMail.jsp" parameter="method" scope="request" validate="true"
 */
public class NewMailAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		NewMailForm newMailForm = (NewMailForm) form;
		String loginName = (String)request.getSession().getAttribute("LoginName");//admin
		
		String address = request.getParameter("address");
		if(address == null)
		{
			address = "";
		}
		request.setAttribute("MailAddress", address);
		
		DBTools dbTools = new DBTools();
		String sql = "select ID,ACCOUNTNAME,MAILADDRESS,ISDEFAULT from TB_MAILCONFIG order by ISDEFAULT desc";
		ArrayList result = dbTools.queryMailList(sql, new String[0]);
		if(result.size() > 0)
		{
			newMailForm.setRecordNotFind("false");
			newMailForm.setSendNameList(result);
		}
		else
		{
			newMailForm.setRecordNotFind("true");
		}
		return mapping.findForward("init");
	}

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward sendEmail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		NewMailForm newMailForm = (NewMailForm) form;
		
		String recvName = request.getParameter("org3.conName");//收件人
		String csName = request.getParameter("org2.conName");//抄送人
		String id = newMailForm.getSendName();//发件人id
		String loginName = (String)request.getSession().getAttribute("LoginName");//
		String accessoryPath = request.getSession().getServletContext().getRealPath("/") + "/temp/" + loginName + "/";
		String content = newMailForm.getContent();//内容
		String title = newMailForm.getTitle();//主题
		
		DBTools dbTools = new DBTools();
		String sql = "select * from TB_MAILCONFIG where ID=?";
		EmailBean emailBean = dbTools.queryEmailConfig(sql, new String[]{id});
		
		EmailTools emailTools = new EmailTools();
		boolean result = false;
		if(emailBean != null)
		{
			EmailInfo emailInfo = new EmailInfo();
			emailInfo.setSendName(emailBean.getMailBoxAddress());//发件人
			emailInfo.setCsName(csName);//抄送人
			emailInfo.setRecvName(recvName);//收件人
			emailInfo.setTitle(title);//主题
			emailInfo.setContent(content);//内容
			emailInfo.setAccessory(accessoryPath);
			result = emailTools.SendEmail(emailInfo, emailBean);
		}
		
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "邮件发送成功！");
			//json.put("callbackType", "closeCurrent");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "邮件发送失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		return null;
	}
	
	
	public void upload(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		/*
		String savePath = this.getServlet().getServletContext().getRealPath("");
        savePath = savePath + "/uploads/";
        File f1 = new File(savePath);
        System.out.println(savePath);
        if (!f1.exists()) {
            f1.mkdirs();
        }
        DiskFileItemFactory fac = new DiskFileItemFactory();
        ServletFileUpload upload = new ServletFileUpload(fac);
        upload.setHeaderEncoding("utf-8");
        List fileList = null;
        try {
            fileList = upload.parseRequest(request);
        } catch (FileUploadException ex) {
            return;
        }
        Iterator it = fileList.iterator();
        String name = "";
        String extName = "";
        while (it.hasNext()) {
            FileItem item = (FileItem) it.next();
            if (!item.isFormField()) {
                name = item.getName();
                long size = item.getSize();
                String type = item.getContentType();
                System.out.println(size + " " + type);
                if (name == null || name.trim().equals("")) {
                    continue;
                }
                //��չ���ʽ��
                if (name.lastIndexOf(".") >= 0) {
                    extName = name.substring(name.lastIndexOf("."));
                }
                File file = null;
                do {
                    //����ļ���
                    name = UUID.randomUUID().toString();
                    file = new File(savePath + name + extName);
                } while (file.exists());
                File saveFile = new File(savePath + name + extName);
                try {
                    item.write(saveFile);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        
        try {
			response.getWriter().print(name + extName);
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		*/
		
		//�ļ���ŵ�Ŀ¼  
        File tempDirPath =new File(request.getSession().getServletContext().getRealPath("/")+"/uploads/");  
        if(!tempDirPath.exists()){  
            tempDirPath.mkdirs();  
        }  
          
        //���������ļ�����  
        DiskFileItemFactory fac = new DiskFileItemFactory();      
        //����servlet�ļ��ϴ����  
        ServletFileUpload upload = new ServletFileUpload(fac);      
        //�ļ��б�  
        List fileList = null;      
        //����request�Ӷ�õ�ǰ̨���������ļ�  
        try {      
            fileList = upload.parseRequest(request);      
        } catch (FileUploadException ex) {      
            ex.printStackTrace();      
            return;      
        }   
        //�������ļ���  
        String imageName = null;  
        //�����ǰ̨�õ����ļ��б�  
        Iterator it = fileList.iterator();     
        while(it.hasNext()){      
            FileItem item =  (FileItem) it.next();     
            //�������ͨ�?�򣬵����ļ���������  
            if(!item.isFormField()){  
            imageName = new Date().getTime()+Math.random()*10000+item.getName();  
                BufferedInputStream in = new BufferedInputStream(item.getInputStream());     
                BufferedOutputStream out = new BufferedOutputStream(        
                        new FileOutputStream(new File(tempDirPath+"/"+imageName)));  
                Streams.copy(in, out, true);  
                  
            }  
        }  
        //  
        PrintWriter out = null;  
        try {  
            out = encodehead(request, response);  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
        //����ط������٣�����ǰ̨�ò����ϴ��Ľ��  
        out.write("1");  
        out.close();  
	}
	/** 
     * Ajax���� ��ȡ PrintWriter 
     * @return 
     * @throws IOException  
     * @throws IOException  
     * request.setCharacterEncoding("utf-8"); 
        response.setContentType("text/html; charset=utf-8"); 
     */  
    private PrintWriter encodehead(HttpServletRequest request,HttpServletResponse response) throws IOException{  
        request.setCharacterEncoding("utf-8");  
        response.setContentType("text/html; charset=utf-8");  
        return response.getWriter();  
    }  
}