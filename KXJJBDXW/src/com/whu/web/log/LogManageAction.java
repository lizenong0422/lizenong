/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.whu.web.log;

import java.io.PrintWriter;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.whu.tools.CheckPage;
import com.whu.tools.DBTools;
import com.whu.web.common.SystemShare;
import com.whu.web.eventmanage.MeetManageForm;

/** 
 * MyEclipse Struts
 * Creation date: 01-23-2014
 * 
 * XDoclet definition:
 * @struts.action path="/logManageAction" name="logManageForm" parameter="method" scope="request" validate="true"
 */
public class LogManageAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	public ActionForward init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LogManageForm logManageForm = (LogManageForm) form;
		CheckPage pageBean = new CheckPage();
		int queryPageNo = 1;// 
		int rowsPerPage = 20;// 
		pageBean.setRowsPerPage(rowsPerPage);
		if (request.getParameter("queryPageNo") != null && request.getParameter("queryPageNo") != "") {
			queryPageNo = Integer.parseInt(request.getParameter("queryPageNo"));
		}
		pageBean.setQueryPageNo(queryPageNo);
		String sql = "select * from SYS_LOGINFO order by ID desc";
		String[] params = new String[0];
		request.getSession().setAttribute("queryLogSql", sql);
		request.getSession().setAttribute("queryLogParams", params);
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		DBTools db = new DBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryLogList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			logManageForm.setRecordNotFind("false");
			logManageForm.setRecordList(result);
			
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			logManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		//根据阶段的不同跳转到不同的页面
		return mapping.findForward("init");
	}
	/**
	 * 查询和分页
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward queryMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");	
		LogManageForm logManageForm = (LogManageForm) form;
		String operation = request.getParameter("operation");
		String orderField = request.getParameter("orderField");
		String orderDirection = request.getParameter("orderDirection");

		CheckPage pageBean = new CheckPage();
		String sql = "";
		String[] params = new String[0];
		int queryPageNo = 1;
		int rowsPerPage = 20;
		pageBean.setRowsPerPage(rowsPerPage);

		if (operation.equalsIgnoreCase("search") || operation.equalsIgnoreCase("select")) {
			String operator = logManageForm.getOperator();
			String logType = logManageForm.getLogType();
			String logBeginTime = logManageForm.getLogBeginTime();
			String logEndTime = logManageForm.getLogEndTime();
			String temp = "";
			ArrayList<String> paramList= new ArrayList<String>();
			if(operator != null && !operator.equals(""))
			{
				temp += " and OPERATOR like ?";
				paramList.add("%" + operator + "%");
			}
			if(logType != null && !logType.equals(""))
			{
				temp += " and LOGTYPE=?";
				paramList.add(logType);
			}
			if(logBeginTime != null  && !logBeginTime.equals(""))
			{
				temp += " and TIME >= ?";
				paramList.add(logBeginTime);
			}
			if(logEndTime != null && !logEndTime.equals(""))
			{
				temp += " and TIME <= ?";
				paramList.add(logEndTime);
			}
			params = paramList.toArray(new String[0]);
			sql = "select * from SYS_LOGINFO where 1=1 " + temp + " order by ID desc";
			request.getSession().setAttribute("queryLogSql", sql);
			request.getSession().setAttribute("queryLogParams", params);
		}
		
		else if(operation.equalsIgnoreCase("changePage")){
			sql = (String)request.getSession().getAttribute("queryLogSql");
			params = (String[])request.getSession().getAttribute("queryLogParams");
			if(orderField != null && !orderField.equals("") && !orderField.matches("[=<>]") && (orderDirection.equalsIgnoreCase("asc") || orderDirection.equalsIgnoreCase("desc")))
			{
				//去掉默认的以ID排序，即ID desc共7个字符，然后附加上用户选择的排序字段
				//有些时候默认不是以ID排序，所以不能用这种分割方法！可以用查找order位置的方法，替换后面的order by ID asc
				//sql = sql.substring(0, sql.length()-7);
				sql = sql.substring(0, sql.indexOf("order"));
				sql += " order by " + orderField + " " + orderDirection;
			}
			if (request.getParameter("pageNum") != null && request.getParameter("pageNum") != "") {
				queryPageNo = Integer.parseInt(request.getParameter("pageNum"));
			}
		}
		pageBean.setQuerySql(sql);
		pageBean.setParams(params);
		pageBean.setQueryPageNo(queryPageNo);
		DBTools db = new DBTools();
		ResultSet rs = db.queryRs(queryPageNo, pageBean, rowsPerPage);
		ArrayList result = db.queryLogList(rs, rowsPerPage);
		if(result.size() > 0)
		{
			logManageForm.setRecordNotFind("false");
			logManageForm.setRecordList(result);
			SystemShare.SplitPageFun(request, pageBean, 1);
		}
		else
		{
			logManageForm.setRecordNotFind("true");
			SystemShare.SplitPageFun(request, pageBean, 0);
		}
		return mapping.findForward("init");
	}
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		
		String ids = request.getParameter("ids");
		DBTools dbTool = new DBTools();
		boolean result = true;
		if(ids == null || ids.equals(""))
		{
			String id = request.getParameter("id");
			result = dbTool.deleteItemReal(id, "SYS_LOGINFO", "ID");
		}
		else
		{
			String[] arrID = ids.split(",");
			result = dbTool.deleteItemsReal(arrID, "SYS_LOGINFO", "ID");
		}
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		if(result)
		{
			json.put("statusCode", 200);
			json.put("message", "删除成功！");
		}
		else
		{
			json.put("statusCode", 300);
			json.put("message", "删除失败！");
		}
		out.write(json.toString());
		out.flush();
		out.close();
		
		return null;
	}
}